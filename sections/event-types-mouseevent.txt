<h3 id="events-mouseevents">Mouse Events</h3>

	The mouse event module originates from the [[HTML401]] <code>onclick</code>,
	<code>ondblclick</code>, <code>onmousedown</code>, <code>onmouseup</code>,
	<code>onmouseover</code>, <code>onmousemove</code>, and
	<code>onmouseout</code> attributes. This event module is specifically
	designed for use with pointing input devices, such as a mouse or a trackball.

	<h4 id="interface-mouseevent">Interface MouseEvent</h4>

		<p class="intro-dom">Introduced in DOM Level 2, modified in this
		specification
		</p>

		The {{MouseEvent}} interface provides specific contextual information
		associated with Mouse events.

		In the case of nested elements, mouse events are always targeted at the
		most deeply nested element.

		<p class="note">
		Ancestors of the targeted element can use event bubbling to obtain
		notifications of mouse events which occur within their descendent
		elements.
		</p>

		To create an instance of the {{MouseEvent}} interface, use the
		{{MouseEvent}} constructor, passing an optional {{MouseEventInit}}
		dictionary.

		<p class="note">
		When initializing {{MouseEvent}} objects using <code>initMouseEvent</code>,
		implementations can use the client coordinates {{MouseEvent/clientX}}
		and {{MouseEvent/clientY}} for calculation of other coordinates (such
		as target coordinates exposed by <a>DOM Level 0</a> implementations or
		other proprietary attributes, e.g., <code>pageX</code>).
		</p>

		<h5 id="idl-mouseevent">MouseEvent</h5>

			<pre class="idl">
			[Exposed=Window]
			interface MouseEvent : UIEvent {
				constructor(DOMString type, optional MouseEventInit eventInitDict = {});
				readonly attribute long screenX;
				readonly attribute long screenY;
				readonly attribute long clientX;
				readonly attribute long clientY;
				readonly attribute long layerX;
				readonly attribute long layerY;

				readonly attribute boolean ctrlKey;
				readonly attribute boolean shiftKey;
				readonly attribute boolean altKey;
				readonly attribute boolean metaKey;

				readonly attribute short button;
				readonly attribute unsigned short buttons;

				readonly attribute EventTarget? relatedTarget;

				boolean getModifierState(DOMString keyArg);
			};
			</pre>

			<dl dfn-for="MouseEvent">
				<dt><dfn attribute>screenX</dfn></dt>
				<dd>
					The horizontal coordinate at which the event occurred relative
					to the origin of the screen coordinate system.

					The <a>un-initialized value</a> of this attribute MUST be
					<code>0</code>.
				</dd>

				<dt><dfn attribute>screenY</dfn></dt>
				<dd>
					The vertical coordinate at which the event occurred relative to
					the origin of the screen coordinate system.

					The <a>un-initialized value</a> of this attribute MUST be
					<code>0</code>.
				</dd>

				<dt><dfn attribute>clientX</dfn></dt>
				<dd>
					The horizontal coordinate at which the event occurred relative
					to the viewport associated with the event.

					The <a>un-initialized value</a> of this attribute MUST be
					<code>0</code>.
				</dd>

				<dt><dfn attribute>clientY</dfn></dt>
				<dd>
					The vertical coordinate at which the event occurred relative
					to the viewport associated with the event.

					The <a>un-initialized value</a> of this attribute MUST be
					<code>0</code>.
				</dd>

				<dt><dfn attribute>layerX</dfn></dt>
				<dd>
					The horizontal offset from the nearest <a>ancestor</a> element which
					is a <a>stacking context</a>, is <a>positioned</a>, or paints in the
					positioned phase when <a>painting a stacking context</a>.

					The <a>un-initialized value</a> of this attribute MUST be
					<code>0</code>.
				</dd>

				<dt><dfn attribute>layerY</dfn></dt>
				<dd>
					The vertical offset from the nearest <a>ancestor</a> element which
					is a <a>stacking context</a>, is <a>positioned</a>, or paints in the
					positioned phase when <a>painting a stacking context</a>.

					The <a>un-initialized value</a> of this attribute MUST be
					<code>0</code>.
				</dd>

				<dt><dfn attribute>ctrlKey</dfn></dt>
				<dd>
					Refer to the {{KeyboardEvent}}'s {{KeyboardEvent/ctrlKey}} attribute.

					The <a>un-initialized value</a> of this attribute MUST be
					<code>false</code>.
				</dd>

				<dt><dfn attribute>shiftKey</dfn></dt>
				<dd>
					Refer to the {{KeyboardEvent}}'s {{KeyboardEvent/shiftKey}} attribute.

					The <a>un-initialized value</a> of this attribute MUST be
					<code>false</code>.
				</dd>

				<dt><dfn attribute>altKey</dfn></dt>
				<dd>
					Refer to the {{KeyboardEvent}}'s {{KeyboardEvent/altKey}} attribute.

					The <a>un-initialized value</a>
					of this attribute MUST be <code>false</code>.
				</dd>

				<dt><dfn attribute>metaKey</dfn></dt>
				<dd>
					Refer to the {{KeyboardEvent}}'s {{KeyboardEvent/metaKey}} attribute.

					The <a>un-initialized value</a>
					of this attribute MUST be <code>false</code>.
				</dd>

				<dt><dfn attribute>button</dfn></dt>
				<dd>
					During mouse events caused by the depression or release of a mouse button,
					{{MouseEvent/button}} MUST be used to indicate which pointer device button
					changed state.

					The value of the {{MouseEvent/button}}
					attribute MUST be as follows:

					*	<code>0</code> MUST indicate the primary button of the device
						(in general, the left button  or the only button on single-button devices,
						used to activate a user interface control or select text) or the
						un-initialized value.
					*	<code>1</code> MUST indicate the auxiliary button
						(in general, the middle button, often combined with a mouse wheel).
					*	<code>2</code> MUST indicate the secondary button
						(in general, the right button, often used to display a context menu).
					*	<code>3</code> MUST indicate the X1 (back) button.
					*	<code>4</code> MUST indicate the X2 (forward) button.

					Some pointing devices provide or simulate more button states, and values higher than
					<code>2</code> or lower than <code>0</code> MAY be used to represent such buttons.

					<p class="note">
					The value of {{MouseEvent/button}} is not updated for events not caused by the
					depression/release of a mouse button.
					In these scenarios, take care not to interpret the value <code>0</code> as the
					left button, but rather as the <a>un-initialized value</a>.
					</p>

					<p class="note">
					Some <a>default actions</a> related
					to events such as EVENT{mousedown} and
					EVENT{mouseup} depend on the specific mouse
					button in use.
					</p>

					The <a>un-initialized value</a>
					of this attribute MUST be <code>0</code>.
				</dd>

				<dt><dfn attribute>buttons</dfn></dt>
				<dd>
					During any mouse events, {{MouseEvent/buttons}} MUST be used to
					indicate which combination of mouse buttons are currently being
					pressed, expressed as a bitmask.

					<p class="note">
					Though similarly named, the values for the
					{{MouseEvent/buttons}} attribute and the {{MouseEvent/button}}
					attribute are very different. The value of {{MouseEvent/button}}
					is assumed to be valid during EVENT{mousedown} / EVENT{mouseup}
					event handlers, whereas the {{MouseEvent/buttons}} attribute
					reflects the state of the mouse's buttons for any trusted
					{{MouseEvent}} object (while it is being dispatched), because it
					can represent the "no button currently active" state (0).
					</p>

					The value of the {{MouseEvent/buttons}}
					attribute MUST be as follows:

					*	<code>0</code> MUST indicate no button is currently active.
					*	<code>1</code> MUST indicate the primary button of the device
						(in general, the left button or the only button on single-button devices,
						used to activate a user interface control or select text).
					*	<code>2</code> MUST indicate the secondary button
						(in general, the right button, often used to display a context menu), if present.
					*	<code>4</code> MUST indicate the auxiliary button
						(in general, the middle button, often combined with a mouse wheel).

					Some pointing devices provide or simulate more buttons. To
					represent such buttons, the value MUST be doubled for each
					successive button (in the binary series <code>8</code>,
					<code>16</code>, <code>32</code>, ... ).

					<p class="note">
					Because the sum of any set of button values is a unique number,
					a content author can use a bitwise operation to determine how
					many buttons are currently being pressed and which buttons they
					are, for an arbitrary number of mouse buttons on a device. For
					example, the value <code>3</code> indicates that the left and
					right button are currently both pressed, while the value
					<code>5</code> indicates that the left and middle button are
					currently both pressed.

					<p class="note">
					Some <a>default actions</a> related to events such as
					EVENT{mousedown} and EVENT{mouseup} depend on the specific mouse
					button in use.
					</p>

					The <a>un-initialized value</a>
					of this attribute MUST be <code>0</code>.
				</dd>

				<dt><dfn attribute>relatedTarget</dfn></dt>
				<dd>
					Used to identify a secondary {{EventTarget}} related to a UI event, depending on the type of event.

					The <a>un-initialized value</a> of this attribute MUST be <code>null</code>.
				</dd>

				<dt><dfn method>getModifierState(keyArg)</dfn></dt>
				<dd>
					<p class="intro-dom">Introduced in this specification</p>

					Queries the state of a modifier using a key value.

					Returns <code>true</code> if it is a modifier key and the
					modifier is activated, <code>false</code> otherwise.

					<dl class="parameters">
						<dt>DOMString keyArg</dt>
						<dd>
							Refer to the {{KeyboardEvent}}'s {{KeyboardEvent/getModifierState()}}
							method for a description of this parameter.
						</dd>
					</dl>
				</dd>
			</dl>

		<h5 id="idl-mouseeventinit">MouseEventInit</h5>

			<pre class="idl">
			dictionary MouseEventInit : EventModifierInit {
				long screenX = 0;
				long screenY = 0;
				long clientX = 0;
				long clientY = 0;

				short button = 0;
				unsigned short buttons = 0;
				EventTarget? relatedTarget = null;
			};
			</pre>

			<dl dfn-for="MouseEventInit">
				<dt><dfn dict-member>screenX</dfn></dt>
				<dd>
					Initializes the {{MouseEvent/screenX}} attribute of the {{MouseEvent}}
					object to the desired horizontal relative position of the mouse
					pointer on the user's screen.

					Initializing the event object to the given mouse position must
					not move the user's mouse pointer to the initialized position.
				</dd>

				<dt><dfn dict-member>screenY</dfn></dt>
				<dd>
					Initializes the {{MouseEvent/screenY}} attribute of the {{MouseEvent}}
					object to the desired vertical relative position of the mouse
					pointer on the user's screen.

					Initializing the event object to the given mouse position must
					not move the user's mouse pointer to the initialized position.
				</dd>

				<dt><dfn dict-member>clientX</dfn></dt>
				<dd>
					Initializes the {{MouseEvent/clientX}} attribute of the {{MouseEvent}}
					object to the desired horizontal position of the mouse pointer
					relative to the client window of the user's browser.

					Initializing the event object to the given mouse position must
					not move the user's mouse pointer to the initialized position.
				</dd>

				<dt><dfn dict-member>clientY</dfn></dt>
				<dd>
					Initializes the {{MouseEvent/clientY}} attribute of the {{MouseEvent}}
					object to the desired vertical position of the mouse pointer
					relative to the client window of the user's browser.

					Initializing the event object to the given mouse position must
					not move the user's mouse pointer to the initialized position.
				</dd>

				<dt><dfn dict-member>button</dfn></dt>
				<dd>
					Initializes the {{MouseEvent/button}} attribute of the {{MouseEvent}}
					object to a number representing the desired state of the button(s)
					of the mouse.

					<p class="note">
					The value 0 is used to represent
					the primary mouse button, 1 is used to represent the auxiliary/middle
					mouse button, and 2 to represent the right mouse button.
					Numbers greater than 2 are also possible, but are not specified
					in this document.
					</p>
				</dd>

				<dt><dfn dict-member>buttons</dfn></dt>
				<dd>
					Initializes the {{MouseEvent/buttons}} attribute of the {{MouseEvent}}
					object to a number representing one <em>or more</em> of the button(s) of the mouse
					that are to be considered active.

					<p class="note">
					The {{MouseEvent/buttons}}
					attribute is a bit-field. If a mask value of 1 is true when applied to
					the value of the bit field, then the primary mouse button is down. If a
					mask value of 2 is true when applied to the value of the bit field, then
					the right mouse button is down. If a mask value of 4 is true when applied
					to the value of the bit field, then the auxiliary/middle button is down.
					</p>

					<p class="example">
					In JavaScript, to initialize the
					{{MouseEvent/buttons}} attribute as if the right (2) and middle
					button (4) were being pressed simultaneously, the buttons value
					can be assigned as either:<br>
					<code>&nbsp;&nbsp;{ buttons: 2 | 4 }</code><br>
					or:<br>
					<code>&nbsp;&nbsp;{ buttons: 6 }</code>
					</p>
				</dd>

				<dt><dfn dict-member>relatedTarget</dfn></dt>
				<dd>
					The <code>relatedTarget</code> should be initialized to the element
					whose bounds the mouse pointer just left (in the case of a
					<em>mouseover</em> or <em>mouseenter</em> event) or the element
					whose bounds the mouse pointer is entering (in the case of a
					<em>mouseout</em> or <em>mouseleave</em>
					or <em>focusout</em> event). For other events, this value need not
					be assigned (and will default to null).
				</dd>

			</dl>

	<p id="current-click-count">Implementations MUST maintain the <em>current
	click count</em> when generating mouse events. This MUST be a non-negative
	integer indicating the number of consecutive clicks of a pointing device
	button within a specific time. The delay after which the count resets is
	specific to the environment configuration.
	</p>

	<h4 id="event-modifier-initializers">Event Modifier Initializers</h4>

		The {{MouseEvent}} and {{KeyboardEvent}} interfaces share a set of
		keyboard modifier attributes and support a mechanism for retrieving
		additional modifier states. The following dictionary enables authors to
		initialize keyboard modifier attributes of the {{MouseEvent}} and
		{{KeyboardEvent}} interfaces, as well as the additional modifier states
		queried via {{KeyboardEvent/getModifierState()}}. The steps for
		constructing events using this dictionary are defined in the
		<a href="#event-constructors">event constructors</a> section.

		<pre class="idl">
		dictionary EventModifierInit : UIEventInit {
			boolean ctrlKey = false;
			boolean shiftKey = false;
			boolean altKey = false;
			boolean metaKey = false;

			boolean modifierAltGraph = false;
			boolean modifierCapsLock = false;
			boolean modifierFn = false;
			boolean modifierFnLock = false;
			boolean modifierHyper = false;
			boolean modifierNumLock = false;
			boolean modifierScrollLock = false;
			boolean modifierSuper = false;
			boolean modifierSymbol = false;
			boolean modifierSymbolLock = false;
		};
		</pre>

		<dl dfn-for="EventModifierInit">
			<dt><dfn dict-member>ctrlKey</dfn></dt>
			<dd>
				Initializes the <code>ctrlKey</code> attribute of the
				{{MouseEvent}} or {{KeyboardEvent}}
				objects to <code>true</code> if the KEYCAP{Control}
				key modifier is to be considered active,
				<code>false</code> otherwise.

				When <code>true</code>, implementations must also initialize the event object's key modifier
				state such that calls to the
				{{MouseEvent/getModifierState()}} or
				{{KeyboardEvent/getModifierState()}}
				when provided with the parameter KEYCAP{Control}
				must return <code>true</code>.
			</dd>

			<dt><dfn dict-member>shiftKey</dfn></dt>
			<dd>
				Initializes the <code>shiftKey</code> attribute of the
				{{MouseEvent}} or {{KeyboardEvent}}
				objects to <code>true</code> if the KEYCAP{Shift}
				key modifier is to be considered active, <code>false</code> otherwise.

				When <code>true</code>, implementations must also initialize the event object's key modifier
				state such that calls to the
				{{MouseEvent/getModifierState()}} or
				{{KeyboardEvent/getModifierState()}}
				when provided with the parameter KEYCAP{Shift} must
				return <code>true</code>.
			</dd>

			<dt><dfn dict-member>altKey</dfn></dt>
			<dd>
				Initializes the <code>altKey</code> attribute of the
				{{MouseEvent}} or {{KeyboardEvent}}
				objects to <code>true</code> if the KEYCAP{Alt}
				(alternative) (or KEYCAP{Option}) key modifier
				is to be considered active, <code>false</code> otherwise.

				When <code>true</code>, implementations must also initialize the event object's key modifier
				state such that calls to the
				{{MouseEvent/getModifierState()}} or
				{{KeyboardEvent/getModifierState()}}
				when provided with the parameter KEYCAP{Alt} must
				return <code>true</code>.
			</dd>

			<dt><dfn dict-member>metaKey</dfn></dt>
			<dd>
				Initializes the <code>metaKey</code> attribute of the
				{{MouseEvent}} or {{KeyboardEvent}}
				objects to <code>true</code> if the KEYCAP{Meta}
				key modifier is to be considered active, <code>false</code> otherwise.

				When <code>true</code>, implementations must also initialize the event object's
				key modifier state such that calls to the
				{{MouseEvent/getModifierState()}} or
				{{KeyboardEvent/getModifierState()}}
				when provided with either the parameter KEYCAP{Meta}
				must return <code>true</code>.
			</dd>

			<dt><dfn dict-member>modifierAltGraph</dfn></dt>
			<dd>
				Initializes the event object's key modifier state such that calls to the
				{{MouseEvent/getModifierState()}} or
				{{KeyboardEvent/getModifierState()}}
				when provided with the parameter KEYCAP{AltGraph} must
				return <code>true</code>.
			</dd>

			<dt><dfn dict-member>modifierCapsLock</dfn></dt>
			<dd>
				Initializes the event object's key modifier state such that calls to the
				{{MouseEvent/getModifierState()}} or
				{{KeyboardEvent/getModifierState()}}
				when provided with the parameter KEYCAP{CapsLock} must
				return <code>true</code>.
			</dd>

			<dt><dfn dict-member>modifierFn</dfn></dt>
			<dd>
				Initializes the event object's key modifier state such that calls to the
				{{MouseEvent/getModifierState()}} or
				{{KeyboardEvent/getModifierState()}}
				when provided with the parameter KEYCAP{Fn} must
				return <code>true</code>.
			</dd>

			<dt><dfn dict-member>modifierFnLock</dfn></dt>
			<dd>
				Initializes the event object's key modifier state such that calls to the
				{{MouseEvent/getModifierState()}} or
				{{KeyboardEvent/getModifierState()}}
				when provided with the parameter KEYCAP{FnLock} must
				return <code>true</code>.
			</dd>

			<dt><dfn dict-member>modifierHyper</dfn></dt>
			<dd>
				Initializes the event object's key modifier state such that calls to the
				{{MouseEvent/getModifierState()}} or
				{{KeyboardEvent/getModifierState()}}
				when provided with the parameter KEYCAP{Hyper} must
				return <code>true</code>.
			</dd>

			<dt><dfn dict-member>modifierNumLock</dfn></dt>
			<dd>
				Initializes the event object's key modifier state such that calls to the
				{{MouseEvent/getModifierState()}} or
				{{KeyboardEvent/getModifierState()}}
				when provided with the parameter KEYCAP{NumLock} must
				return <code>true</code>.
			</dd>

			<dt><dfn dict-member>modifierScrollLock</dfn></dt>
			<dd>
				Initializes the event object's key modifier state such that calls to the
				{{MouseEvent/getModifierState()}} or
				{{KeyboardEvent/getModifierState()}}
				when provided with the parameter KEYCAP{ScrollLock} must
				return <code>true</code>.
			</dd>

			<dt><dfn dict-member>modifierSuper</dfn></dt>
			<dd>
				Initializes the event object's key modifier state such that calls to the
				{{MouseEvent/getModifierState()}} or
				{{KeyboardEvent/getModifierState()}}
				when provided with the parameter KEYCAP{Super} must
				return <code>true</code>.
			</dd>

			<dt><dfn dict-member>modifierSymbol</dfn></dt>
			<dd>
				Initializes the event object's key modifier state such that calls to the
				{{MouseEvent/getModifierState()}} or
				{{KeyboardEvent/getModifierState()}}
				when provided with the parameter KEYCAP{Symbol} must
				return <code>true</code>.
			</dd>

			<dt><dfn dict-member>modifierSymbolLock</dfn></dt>
			<dd>
				Initializes the event object's key modifier state such that calls to the
				{{MouseEvent/getModifierState()}} or
				{{KeyboardEvent/getModifierState()}}
				when provided with the parameter KEYCAP{SymbolLock} must
				return <code>true</code>.
			</dd>
		</dl>

	<h4 id="mouseevent-algorithms">MouseEvent Algorithms</h4>

		<h5 id="mouseevent-native-requirements">Native OS Requirements</h5>

			The algorithms in this section assume that the native platform OS will
			provide the following:

			* An event when the mouse is moved (handled by <a>handle native mouse move</a>)
			* An event when a mouse button is pressed (handled by <a>handle native mouse down</a>)
			* An event when a mouse button is released (handled by <a>handle native mouse up</a>)
			* A way to identify when a mouse button press should be interpreted as a "click"
				(handled by <a>handle native mouse click</a>)
				* For example, as a flag or as a separate event
				* If a separate "click" event is fired, then the native OS will fire it
					immediately after the corresponding "mouse up" event, with no
					intervening mouse-related events
			* A way to identify when a mouse click is a "double click" (handled by
				<a>handle native mouse double click</a>)

			For these events, the OS will be able to provide the following info:

			* The x,y mouse coordinates relative to the native OS desktop
			* The x,y mouse coordinates relative to the UA's window viewport
			* Which keyboard modifiers are currently being held

		<h5 id="mouseevent-global-state">Global State for MouseEvent</h5>

			<h6 id="mouseevent-global-ua">User Agent-Level State</h6>

				The UA must maintain the following values that are shared for the entire
				User Agent.

				A <dfn>mouse button bitmask</dfn> that tracks the current state of the
				mouse buttons.

			<h6 id="mouseevent-global-window">Window-Level State</h6>

				The UA must maintain the following values that are shared for the Window.

				A <dfn>last mouse element</dfn> value (initially undefined) that keeps track
				of the last {{Element}} that we sent a MouseEvent to.

				A <dfn>last mouse DOM path</dfn> value (initially empty) that contains a snapshot
				of the ancestors {{Element}}s of the <a>last mouse element</a> when the most recent mouse
				event was sent.

		<h5 id="mouseevent-internal-state">Internal State for MouseEvent</h5>

			<dl dfn-for="MouseEvent">
				<li><dfn>shift flag</dfn></li>
				<li><dfn>control flag</dfn></li>
				<li><dfn>alt flag</dfn></li>
			    <li><dfn>altgraph flag</dfn></li>
				<li><dfn>meta flag</dfn></li>
			</dl>

		<div class="algorithm" data-algorithm="initialize-a-mouseevent" data-export>
		<h5 id="initialize-a-mouseevent-id"><dfn>initialize a MouseEvent</dfn></h5>

			: Input
			:: |event|, the {{MouseEvent}} to initialize
			:: |eventType|, a DOMString containing the event type
			:: |eventTarget|, the {{EventTarget}} of the event
		    :: |bubbles|, true if this event bubbles
		    :: |cancelable|, true if this event is cancelable

			: Output
			:: None

			1. <a>Initialize a UIEvent</a> with |event|, |eventType|, |eventTarget|, |bubbles| and |cancelable|.

			1. Initialize the following public attributes:

				1. Set |event|.{{MouseEvent/screenX}} = the x-coordinate of the position where the event occurred
					relative to the origin of the desktop
				1. Set |event|.{{MouseEvent/screenY}} = the y-coordinate of the position where the event occurred
					relative to the origin of the desktop
				1. Set |event|.{{MouseEvent/clientX}} = the x-coordinate of the position where the event occurred
					relative to the origin of the <a>viewport</a>
				1. Set |event|.{{MouseEvent/clientY}} = the y-coordinate of the position where the event occurred
					relative to the origin of the <a>viewport</a>

				1. <a>Set mouse event modifiers</a> with |event|

				1. Set |event|.{{MouseEvent/button}} = 0
				1. Set |event|.{{MouseEvent/buttons}} = <a>mouse button bitmask</a>

			1. <a>Initialize PointerLock attributes for MouseEvent</a> with |event|

		</div><!-- algorithm -->

		<div class="algorithm" data-algorithm="set-event-modifiers">
		<h5 id="set-mouse-event-modifiers-id"><dfn>set mouse event modifiers</dfn></h5>

			: Input
			:: |event|, the {{MouseEvent}} to update

			: Output
			:: None

			1. Set |event|'s <a>shift flag</a> if <a>key modifier state</a> includes "Shift", unset it otherwise
			1. Set |event|'s <a>control flag</a> if <a>key modifier state</a> includes "Control", unset it otherwise
			1. Set |event|'s <a>alt flag</a> if <a>key modifier state</a> includes "Alt", unset it otherwise
		    1. Set |event|'s <a>altgraph flag</a> if <a>key modifier state</a> includes "AltGraph", unset it otherwise
			1. Set |event|'s <a>meta flag</a> if <a>key modifier state</a> includes "Meta", unset it otherwise

			1. Set |event|.{{MouseEvent/shiftKey}} = true if the event's <a>shift flag</a> is set, false otherwise
			1. Set |event|.{{MouseEvent/ctrlKey}} = true if the event's <a>control flag</a> is set, false otherwise
			1. Set |event|.{{MouseEvent/altKey}} = true if the event's <a>alt flag</a> or <a>altgraph flag</a> is set, false otherwise
			1. Set |event|.{{MouseEvent/metaKey}} = true if the event's <a>meta flag</a> is set, false otherwise

		</div><!-- algorithm -->

		<div class="algorithm" data-algorithm="create-a-cancelable-mouseevent">
		<h5 id="create-a-cancelable-mouseevent-id"><dfn>create a cancelable MouseEvent</dfn></h5>

			: Input
			:: |eventType|, a DOMString containing a valid {{MouseEvent}} type
			:: |eventTarget|, the {{EventTarget}} of the event

			: Output
			:: None

			1. Let |bubbles| be "true"
			1. Let |cancelable| be "true"
			
			1. Let |event| = the result of <a>creating a new event</a> using {{MouseEvent}}
			1. <a>Initialize a MouseEvent</a> with |event|, |eventType|, |eventTarget|, |bubbles| and |cancelable|.
			1. Return |event|

		</div><!-- algorithm -->

		<div class="algorithm" data-algorithm="create-a-non-cancelable-mouseevent">
		<h5 id="create-a-non-cancelable-mouseevent-id"><dfn>create a non-cancelable MouseEvent</dfn></h5>

			: Input
			:: |eventType|, a DOMString containing a valid {{MouseEvent}} type
			:: |eventTarget|, the {{EventTarget}} of the event

			: Output
			:: None

			1. Let |bubbles| be "false"
			1. Let |cancelable| be "false"
			
			1. Let |event| = the result of <a>creating a new event</a> using {{MouseEvent}}
			1. <a>Initialize a MouseEvent</a> with |event|, |eventType|, |eventTarget|, |bubbles| and |cancelable|.
			1. Return |event|

		</div><!-- algorithm -->

		<div class="algorithm" data-algorithm="calculate-mouseevent-button-attribute">
		<h5 id="calculate-mouseevent-button-attribute-id"><dfn>calculate MouseEvent button attribute</dfn></h5>

			: Input
			:: |mbutton|, an ID that identifies a mouse button

			: Output
			:: A button ID suitable for storing in the {{MouseEvent}}'s {{MouseEvent/button}} attribute

			1. If |mbutton| is the primary mouse button, then return 0
			1. If |mbutton| is the auxiliary (middle)  mouse button, then return 1
			1. If |mbutton| is the secondary mouse button, then return 2
			1. If |mbutton| is the X1 (back) button, then return 3
			1. If |mbutton| is the X2 (forward) button, then return 4

		</div><!-- algorithm -->

		<div class="algorithm" data-algorithm="set-mouseevent-attributes-from-native">
		<h5 id="set-mouseevent-attributes-from-native-id"><dfn>set MouseEvent attributes from native</dfn></h5>

			: Input
			:: |event|, the {{MouseEvent}} to initialize
			:: |native|, the native mouse event

			: Output
			:: None

			<p class="note">TODO</p>

			1. If |event|.{{Event/type}} is one of [ mousedown, mouseup ], then
				1. Let |mbutton| be an ID from |native| that identifies which mouse button was pressed
				1. Set |event|.{{MouseEvent/button}} = <a>calculate MouseEvent button attribute</a> with |mbutton|

		</div><!-- algorithm -->

		<div class="algorithm" data-algorithm="handle-native-mouse-down">
		<h5 id="handle-native-mouse-down-id"><dfn>handle native mouse down</dfn></h5>

			: Input
			:: |native|, the native mousedown

			: Output
			:: None

			1. Let |mbutton| be an ID from |native| that identifies which mouse button was pressed

			1. Update the <a>mouse button bitmask</a> as follows:
				1. If |mbutton| is the primary mouse button, then set the 0x01 bit
				1. If |mbutton| is the secondary mouse button, then set the 0x02 bit
				1. If |mbutton| is the auxiliary (middle) mouse button, then set the 0x04 bit

				<p class="note">
				Other buttons can be added starting with 0x08
				</p>

			1. Let |target| = <a>hit test</a> with viewport-relative coordinates from |native|
			1. Let |event| = <a>create a cancelable MouseEvent</a> with "mousedown", |target|
			1. <a>Set MouseEvent attributes from native</a> with |native|

			1. <a>Maybe send pointerdown event</a> with |event|

			1. Let |result| = <a>dispatch</a> |event| at |target|

			1. If |result| is true and |target| is a <a>focusable area</a> that is <a>click focusable</a>, then

				1. Run the <a>focusing steps</a> at |target|

			1. if |mbutton| is the secondary mouse button, then

				1. <a>Maybe show context menu</a> with |native|, |target|

		</div><!-- algorithm -->

		<div class="algorithm" data-algorithm="handle-native-mouse-up">
		<h5 id="handle-native-mouse-up-id"><dfn>handle native mouse up</dfn></h5>

			: Input
			:: |native|, the native mouseup

			: Output
			:: None

			<p class="note">
			Other mouse events can occur between the mousedown and mouseup.
			</p>

			1. Let |mbutton| be an ID from |native| that identifies which mouse button was pressed

			1. Update the <a>mouse button bitmask</a> as follows:
				1. If |mbutton| is the primary mouse button, then clear the 0x01 bit
				1. If |mbutton| is the secondary mouse button, then clear the 0x02 bit
				1. If |mbutton| is the auxiliary (middle) mouse button, then clear the 0x04 bit

			1. Let |target| = <a>hit test</a> with viewport-relative coordinates from |native|
			1. Let |event| = <a>create a cancelable MouseEvent</a> with "mouseup", |target|
			1. <a>Set MouseEvent attributes from native</a> with |native|

			1. <a>Maybe send pointerup event</a> with |event|

			1. <a>dispatch</a> |event| at |target|

		</div><!-- algorithm -->

		<div class="algorithm" data-algorithm="handle-native-mouse-click">
		<h5 id="handle-native-mouse-click-id"><dfn>handle native mouse click</dfn></h5>

			: Input
			:: |native|, the native mouse click

			: Output
			:: None

			<p class="note">
			The platform should call this immediately after <a>handle native mouse up</a> for
			mouseups that generate clicks.
			</p>

			1. Let |target| = <a>hit test</a> with viewport-relative coordinates from |native|

			1. <a>Send click event</a> with |native| and |target|.

		</div><!-- algorithm -->

		<div class="algorithm" data-algorithm="send-click-event">
		<h5 id="send-click-event-id"><dfn>send click event</dfn></h5>

			: Input
			:: |native|, the native mousedown
			:: |target|, the {{EventTarget}} of the event

			: Output
			:: None

			1. Let |mbutton| = 1  (primary mouse button by default)
			1. If |native| is valid, then
				1. Let |mbutton| be an ID from |native| that identifies which mouse button was pressed

			1. Set |eventType| = "click" if |mbutton| is the primary mouse button, otherwise "auxclick"

			1. Let |event| = <a>create a PointerEvent</a> with |eventType| and |target|

			1. If |native| is valid, then
				1. <a>Set MouseEvent attributes from native</a> with |event|, |native|
				1. If |event|.{{MouseEvent/screenX}} is not an integer value, then round it.
				1. If |event|.{{MouseEvent/screenY}} is not an integer value, then round it.

			1. <a>dispatch</a> |event| at |target|

			<p class="note">
			See <a href="https://github.com/w3c/pointerevents/issues/100">pointerevents/100</a>
			for info about browsers using PointerEvents and rounded coordinates.
			</p>

			<p class="note">
			Any "default action" is handled during dispatch by triggering the
			<a href="https://dom.spec.whatwg.org/#eventtarget-activation-behavior">activation behavior</a>
			algorithm for the target. So there is no need for handle that here.
			However, need to verify that the existing spec handles disabled/css-pointer-events/inert/...
			</p>

			<p class="note">
			To handle `HTMLelement.click()`, call this algorithm with |native| = null and
			|target| = `HTMLelement`.
			</p>

			<p class="note">
			To handle keyboard-initiated clicks, call this algorithm with |native| = null and
			|target| = currently focused element.
			</p>

		</div><!-- algorithm -->

		<div class="algorithm" data-algorithm="handle-native-mouse-double-click">
		<h5 id="handle-native-mouse-double-click-id"><dfn>handle native mouse double click</dfn></h5>

			: Input
			:: |native|, the native mouse double click

			: Output
			:: None

			<p class="note">
			This should be called immediately after handle native mouse click for
			mouse clicks that generate double clicks.
			</p>

			1. Let |mbutton| be an ID from |native| that identifies which mouse button was pressed

			1. If |mbutton| is not the primary mouse button, then return

			1. Let |target| = <a>hit test</a> with viewport-relative coordinates from |native|

			1. Let |event| = <a>create a PointerEvent</a> with "dblclick" and |target|
			1. <a>Set MouseEvent attributes from native</a> with |event|, |native|
			1. If |event|.{{MouseEvent/screenX}} is not an integer value, then round it.
			1. If |event|.{{MouseEvent/screenY}} is not an integer value, then round it.

			1. <a>dispatch</a> |event| at |target|

		</div><!-- algorithm -->

		<div class="algorithm" data-algorithm="handle-native-mouse-move">
		<h5 id="handle-native-mouse-move-id"><dfn>handle native mouse move</dfn></h5>

			: Input
			:: |native|, the native mouse move

			: Output
			:: None

			<p class="note">
			This algorithm makes assumptions about the dispatch of PointerEvents because they
			are not currently specified explicitly. Once
			<a href="https://github.com/w3c/pointerevents/issues/285">pointerevents/285</a> is resolved
			this may need to be updated.
			</p>

			1. Let |target| = <a>hit test</a> with viewport-relative coordinates from |native|

			1. Let |targetDomPath| = <a>calculate DOM path</a>

			1. Generate events for leaving the current element:

				1. If <a>last mouse element</a> is defined and not equal to |target|, then

					1. Let |mouseout| = <a>create a cancelable MouseEvent</a> with "mouseout" and <a>last mouse element</a>

					<p class="note">
					TODO: Set |mouseout| attributes from |native|. +CSSOM attributes
					</p>

					1. <a>Maybe send pointerout event</a> with |mouseout|

					1. <a>Dispatch</a> |mouseout| at |target|

						<p class="note">
						Verify behavior when canceled (appears to have no effect).
						</p>

					1. Let |leaveElements| be a copy of <a>last mouse DOM path</a> with all
						elements common to |targetDomPath| removed.

					1. For each |element| in |leaveElements|, do

						<p class="note">
						Handle case where |element| has been deleted.
						Also case where it has been moved: Should the DOM mutation have triggered
						a mouseleave event? Should we sent it now? Should it be dropped?
						Need to verify what current browsers do.
						</p>

						1. Let |mouseleave| = <a>create a non-cancelable MouseEvent</a> with "mouseleave" and |element|

						1. Set |mouseleave|.{{composed}} = false

							<p class="note">
							Check compat: Value of event.composed. Spec says false.
							Chrome/Linux = true.
							Firefox/Linux = false.
							</p>

						1. <a>Maybe send pointerleave event</a> with |mouseleave|

						1. Let |result| = <a>dispatch</a> |mouseleave| at |element|

			1. Generate events for entering the new element:

				1. If |target| is not <a>last mouse element</a>, then

					1. Let |mouseover| = <a>create a cancelable MouseEvent</a> with "mouseover" and |target|

					<p class="note">
					TODO: Set |mouseout| attributes from |native|. +CSSOM attributes
					</p>

					1. <a>Maybe send pointerover event</a> with |mouseover|

					1. <a>Dispatch</a> |mouseout| at |target|

						<p class="note">
						Need to verify behavior when canceled (appears to have no effect).
						</p>

					1. Let |enterElements| be a copy of |targetDomPath| with all
						elements common to <a>last mouse DOM path</a> removed.

					1. For each |element| in |enterElements|, do

						<p class="note">
						Handle case where |element| has been deleted or moved.
						</p>

						1. Let |mouseenter| = <a>create a non-cancelable MouseEvent</a> with "mouseenter" and |element|

						1. Set |mouseenter|.{{composed}} = false

							<p class="note">
							Check compat: Value of event.composed. Spec says false.
							Chrome/Linux = true.
							Firefox/Linux = false.
							</p>

						1. <a>Maybe send pointerenter event</a> with |mouseenter|

						<p class="note">
						Check compat for shadow DOM elements.
						Chrome/Linux fires this event at the element and the shadow root.
						</p>

						1. Let |result| = <a>dispatch</a> |mouseenter| at |element|

					1. Set <a>last mouse element</a> to |target|
					1. Set <a>last mouse DOM path</a> to |targetDomPath|

			1. Let |mousemove| = <a>create a cancelable MouseEvent</a> with "mousemove" and |element|

			1. <a>Set PointerLock attributes for mousemove</a>

			1. <a>Maybe send pointermove event</a> with |mousemove|

			1. <a>Dispatch</a> |mousemove| at |element|

		</div><!-- algorithm -->

		<div class="algorithm" data-algorithm="maybe-show-context-menu">
		<h5 id="maybe-show-context-menu-id"><dfn>maybe show context menu</dfn></h5>

			: Input
			:: |native|, the native mousedown or pointer event
			:: |target|, the {{EventTarget}} of the event

			: Output
			:: None

				1. Let |menuevent| = <a>create a PointerEvent</a> with "contextmenu", |target|
				1. If |native| is valid, then
					1. <a>Set MouseEvent attributes from native</a> with |native|

				1. Let |result| = <a>dispatch</a> |menuevent| at |target|
				1. If |result| is true, then show the UA context menu

			<p class="note">
			To handle a context menu triggered by the keyboard, call this algorithm with
			|native| = null and |target| = currently focused element.
			</p>

		</section>

	<h4 id="events-mouseevent-event-order">Mouse Event Order</h4>

		Certain mouse events defined in this specification MUST occur in a set
		order relative to one another. The following shows the event sequence
		that MUST occur when a pointing device's cursor is moved over an element:

		++---+------------+---------+------------------------------------------+
		=| # | Event Type | Element | Notes                                    |
		 +---+------------+----o----+------------------------------------------+
		+| 1 | mousemove  |         |                                          |
		+|   |            |         | <em>Pointing device is moved into        |
		 |   |            |         | element A...</em>                        |
		+| 2 | mouseover  |    A    |                                          |
		+| 3 | mouseenter |    A    |                                          |
		+| 4 | mousemove  |    A    | Multiple EVENT{mousemove} events         |
		+|   |            |         | <em>Pointing device is moved out of      |
		 |   |            |         | element A...</em>                        |
		+| 5 | mouseout   |    A    |                                          |
		+| 6 | mouseleave |    A    |                                          |
		++---+------------+----------------------------------------------------+

		When a pointing device is moved into an element <em>A</em>, and then
		into a nested element <em>B</em> and then back out again, the following
		sequence of events MUST occur:

		++----+------------+---------+-----------------------------------------+
		=|  # | Event Type | Element | Notes                                   |
		 +----+------------+----o----+-----------------------------------------+
		+|  1 | mousemove  |         |                                         |
		+|    |            |         | <em>Pointing device is moved into       |
		 |    |            |         | element A...</em>                       |
		+|  2 | mouseover  |    A    |                                         |
		+|  3 | mouseenter |    A    |                                         |
		+|  4 | mousemove  |    A    | Multiple EVENT{mousemove} events        |
		+|    |            |         | <em>Pointing device is moved into       |
		 |    |            |         | nested element B...</em>                |
		+|  5 | mouseout   |    A    |                                         |
		+|  6 | mouseover  |    B    |                                         |
		+|  7 | mouseenter |    B    |                                         |
		+|  8 | mousemove  |    B    | Multiple EVENT{mousemove} events        |
		+|    |            |         | <em>Pointing device is moved from       |
		 |    |            |         | element B into A...</em>                |
		+|  9 | mouseout   |    B    |                                         |
		+| 10 | mouseleave |    B    |                                         |
		+| 11 | mouseover  |    A    |                                         |
		+| 12 | mousemove  |    A    | Multiple EVENT{mousemove} events        |
		+|    |            |         | <em>Pointing device is moved out of     |
		 |    |            |         | element A...</em>                       |
		+| 13 | mouseout   |    A    |                                         |
		+| 14 | mouseleave |    A    |                                         |
		++----+------------+---------------------------------------------------+

		Sometimes elements can be visually overlapped using CSS. In the
		following example, three elements labeled A, B, and C all have the same
		dimensions and absolute position on a web page. Element C is a child of
		B, and B is a child of A in the DOM:

		<figure id="figure-mouse-event-stacked-elements">
			<img src='images/stacked-event-mouse-dispatch.svg' height="250" alt="Graphical representation of three stacked elements all on top of each other. The bottom element is labeled A and the top element is C">
			<figcaption>Graphical representation of three stacked elements all on top of each other, with the pointing device moving over the stack.</figcaption>
		</figure>

		When the pointing device is moved from outside the element stack to the
		element labeled C and then moved out again, the following series of
		events MUST occur:

		++----+------------+---------+-----------------------------------------+
		=|  # | Event Type | Element | Notes                                   |
		 +----+------------+----o----+-----------------------------------------+
		+|  1 | mousemove  |         |                                         |
		+|    |            |         | <em>Pointing device is moved into       |
		 |    |            |         | element C, the topmost element in the   |
		 |    |            |         | stack</em>                              |
		+|  2 | mouseover  |    C    |                                         |
		+|  3 | mouseenter |    A    |                                         |
		+|  4 | mouseenter |    B    |                                         |
		+|  5 | mouseenter |    C    |                                         |
		+|  6 | mousemove  |    C    | Multiple EVENT{mousemove} events        |
		+|    |            |         | <em>Pointing device is moved out of     |
		 |    |            |         | element C...</em>                       |
		+|  7 | mouseout   |    C    |                                         |
		+|  8 | mouseleave |    C    |                                         |
		+|  9 | mouseleave |    B    |                                         |
		+| 10 | mouseleave |    A    |                                         |
		++----+------------+---------------------------------------------------+

		<p class="note">
		The EVENT{mouseover}/EVENT{mouseout} events are only fired once, while
		EVENT{mouseenter}/EVENT{mouseleave} events are fired three times (once
		to each element).
		</p>

		The following is the typical sequence of events when a button associated
		with a pointing device (e.g., a mouse button or trackpad) is pressed and
		released over an element:

		++----+------------+---------------------------------------------------+
		=|  # | Event Type | Notes                                             |
		 +----+------------+---------------------------------------------------+
		+|  1 | mousedown  |                                                   |
		+|  2 | mousemove  | OPTIONAL, multiple events, some limits            |
		+|  3 | mouseup    |                                                   |
		+|  4 | click      |                                                   |
		+|  5 | mousemove  | OPTIONAL, multiple events, some limits            |
		+|  6 | mousedown  |                                                   |
		+|  7 | mousemove  | OPTIONAL, multiple events, some limits            |
		+|  8 | mouseup    |                                                   |
		+|  9 | click      |                                                   |
		+| 10 | dblclick   |                                                   |
		++----+------------+---------------------------------------------------+

		<p class="note">
		The lag time, degree, distance, and number of EVENT{mousemove} events
		allowed between the EVENT{mousedown} and EVENT{mouseup} events while
		still firing a EVENT{click} or EVENT{dblclick} event will be
		implementation-, device-, and platform-specific. This tolerance can aid
		users that have physical disabilities like unsteady hands when these
		users interact with a pointing device.
		</p>

		Each implementation will determine the appropriate <a>hysteresis</a>
		tolerance, but in general SHOULD fire EVENT{click} and EVENT{dblclick}
		events when the event target of the associated EVENT{mousedown} and
		EVENT{mouseup} events is the same element with no EVENT{mouseout} or
		EVENT{mouseleave} events intervening, and SHOULD fire EVENT{click} and
		EVENT{dblclick} events on the nearest common inclusive ancestor when the
		associated EVENT{mousedown} and EVENT{mouseup} event targets are
		different.

		<p class="example">
		If a EVENT{mousedown} event was targeted at an HTML document's <a>body
		element</a>, and the corresponding EVENT{mouseup} event was targeted at
		the <a>root element</a>, then the EVENT{click} event will be dispatched
		to the <a>root element</a>, since it is the nearest common inclusive
		ancestor.
		</p>

		If the <a>event target</a> (e.g. the target element) is removed from the
		DOM during the mouse events sequence, the remaining events of the
		sequence MUST NOT be fired on that element.

		<p class="example">
		If the target element is removed from the DOM as the result of a
		EVENT{mousedown} event, no events for that element will be dispatched
		for EVENT{mouseup}, EVENT{click}, or EVENT{dblclick}, nor any default
		activation events. However, the EVENT{mouseup} event will still be
		dispatched on the element that is exposed to the mouse after the removal
		of the initial target element. Similarly, if the target element is
		removed from the DOM during the dispatch of a EVENT{mouseup} event, the
		EVENT{click} and subsequent events will not be dispatched.
		</p>

	<h4 id="events-mouse-types">Mouse Event Types</h4>

		The Mouse event types are listed below. In the case of nested elements,
		mouse event types are always targeted at the most deeply nested element.
		Ancestors of the targeted element MAY use bubbling to obtain
		notification of mouse events which occur within its descendent elements.

		<h5 id="event-type-auxclick"><dfn>auxclick</dfn></h5>

			++------------------+--------------------------------------------------------------------------------------+ event-definition
			=| %                |                                                                                      |
			 +------------------+--------------------------------------------------------------------------------------+
			+| Type             | <strong><code>auxclick</code></strong>                                               |
			+| Interface        | {{PointerEvent}}                                                                     |
			+| Sync / Async     | Sync                                                                                 |
			+| Bubbles          | Yes                                                                                  |
			+| Trusted Targets  | <code>Element</code>                                                                 |
			+| Cancelable       | Yes                                                                                  |
			+| Composed         | Yes                                                                                  |
			+| Default action   | Varies                                                                               |
			+| Context<br>      | <ul>                                                                                 |
			 | (trusted events) | <li>{{Event}}.{{Event/target}} : <a>topmost event target</a></li>                    |
			 |                  | <li>{{UIEvent}}.{{UIEvent/view}} : <a><code>Window</code></a></li>                   |
			 |                  | <li>{{UIEvent}}.{{UIEvent/detail}} : indicates the                                   |
			 |                  |     <a href="#current-click-count">current click count</a>; the attribute value MUST |
			 |                  |     be <code>1</code> when the user begins this action and increments by             |
			 |                  |     <code>1</code> for each click.</li>                                              |
			 |                  | <li>{{MouseEvent}}.{{MouseEvent/screenX}} : value based on the pointer position on   |
			 |                  |     the screen</li>                                                                  |
			 |                  | <li>{{MouseEvent}}.{{MouseEvent/screenY}} : value based on the pointer position on   |
			 |                  |     the screen</li>                                                                  |
			 |                  | <li>{{MouseEvent}}.{{MouseEvent/clientX}} : value based on the pointer position      |
			 |                  |     within the viewport</li>                                                         |
			 |                  | <li>{{MouseEvent}}.{{MouseEvent/clientY}} : value based on the pointer position      |
			 |                  |     within the viewport</li>                                                         |
			 |                  | <li>{{MouseEvent}}.{{MouseEvent/layerX}} : value based on the pointer position       |
			 |                  |     within the containing element</li>                                               |
			 |                  | <li>{{MouseEvent}}.{{MouseEvent/layerY}} : value based on the pointer position       |
			 |                  |     within the containing element</li>                                               |
			 |                  | <li>{{MouseEvent}}.{{MouseEvent/altKey}} : <code>true</code> if KEYCAP{Alt}          |
			 |                  |     modifier was active, otherwise <code>false</code></li>                           |
			 |                  | <li>{{MouseEvent}}.{{MouseEvent/ctrlKey}} : <code>true</code> if KEYCAP{Control}     |
			 |                  |     modifier was active, otherwise <code>false</code></li>                           |
			 |                  | <li>{{MouseEvent}}.{{MouseEvent/shiftKey}} : <code>true</code> if KEYCAP{Shift}      |
			 |                  |     modifier was active, otherwise <code>false</code></li>                           |
			 |                  | <li>{{MouseEvent}}.{{MouseEvent/metaKey}} : <code>true</code> if KEYCAP{Meta}        |
			 |                  |     modifier was active, otherwise <code>false</code></li>                           |
			 |                  | <li>{{MouseEvent}}.{{MouseEvent/button}} : value based on current button pressed</li>|
			 |                  | <li>{{MouseEvent}}.{{MouseEvent/buttons}} : value based on all buttons currently     |
			 |                  |     depressed, <code>0</code> if no buttons pressed</li>                             |
			 |                  | <li>{{MouseEvent}}.{{MouseEvent/relatedTarget}} : <code>null</code></li>             |
			 |                  | <li>For {{PointerEvent}} specific attributes, see the [[!PointerEvents3]] spec.</li> |
			 |                  | </ul>                                                                                |
			++------------------+--------------------------------------------------------------------------------------+

			The EVENT{auxclick} event type MUST be dispatched on the <a>topmost
			event target</a> indicated by the pointer, when the user presses
			down and releases the non-primary pointer button, or otherwise activates
			the pointer in a manner that simulates such an action. The actuation
			method of the mouse button depends upon the pointer device and the
			environment configuration, e.g., it MAY depend on the screen
			location or the delay between the press and release of the pointing
			device button.

			The EVENT{auxclick} event should only be fired for the non-primary pointer
			buttons (i.e., when {{MouseEvent/button}} value is not <code>0</code>,
			{{MouseEvent/buttons}} value is greater than <code>1</code>). The primary button
			(like the left button on a standard mouse) MUST NOT fire
			EVENT{auxclick} events. See EVENT{click} for a corresponding event that
			is associated with the primary button.

			The EVENT{auxclick} event MAY be preceded by the EVENT{mousedown} and
			EVENT{mouseup} events on the same element, disregarding changes
			between other node types (e.g., text nodes).  Depending upon the
			environment configuration, the EVENT{auxclick} event MAY be dispatched
			if one or more of the event types EVENT{mouseover},
			EVENT{mousemove}, and EVENT{mouseout} occur between the press and
			release of the pointing device button.

			The <a>default action</a> of the EVENT{auxclick} event type varies
			based on the <a>event target</a> of the event and the value of the
			{{MouseEvent/button}} or {{MouseEvent/buttons}} attributes. Typical
			<a>default actions</a> of the EVENT{auxclick} event type are as follows:

			*	If the <a>event target</a> has associated activation behavior,
				the <a>default action</a> MUST be to execute that activation
				behavior (see [[#event-flow-activation]]).

			<p class="example">
			Receiving and handling auxclick for the middle button.<br>
<code class="pre">myLink.addEventListener("auxclick", function(e) {
  if (e.button === 1) {
    // This would prevent the default behavior which is for example
    // opening a new tab when middle clicking on a link.
    e.preventDefault();
    // Do something else to handle middle button click like taking
    // care of opening link or non-link buttons in new tabs in a way
    // that fits the app. Other actions like closing a tab in a tab-strip
    // which should be done on the click action can be done here too.
  }
});
</code>
			</p>

			<p class="note">
			In the case of right button, the EVENT{auxclick} event is dispatched after
			any EVENT{contextmenu} event. Note that some user agents swallow all input
			events while a context menu is being displayed, so auxclick may not be
			available to applications in such scenarios.
			See <a href="#example-auxclick-right">this example</a> for more clarification.
			</p>

			<p id="example-auxclick-right" class="example">
			Receiving and handling auxclick for the right button<br>
<code class="pre">myDiv.addEventListener("contextmenu", function(e) {
  // This call makes sure no context menu is shown
  // to interfere with page receiving the events.
  e.preventDefault();
});
myDiv.addEventListener("auxclick", function(e) {
  if (e.button === 2) {
    // Do something else to handle right button click like opening a
    // customized context menu inside the app.
  }
});
</code>
			</p>

		<h5 id="event-type-click"><dfn>click</dfn></h5>

			++------------------+--------------------------------------------------------------------------------------+ event-definition
			=| %                |                                                                                      |
			 +------------------+--------------------------------------------------------------------------------------+
			+| Type             | <strong><code>click</code></strong>                                                  |
			+| Interface        | {{PointerEvent}}                                                                     |
			+| Sync / Async     | Sync                                                                                 |
			+| Bubbles          | Yes                                                                                  |
			+| Trusted Targets  | <code>Element</code>                                                                 |
			+| Cancelable       | Yes                                                                                  |
			+| Composed         | Yes                                                                                  |
			+| Default action   | Varies                                                                               |
			+| Context<br>      | <ul>                                                                                 |
			 | (trusted events) | <li>{{Event}}.{{Event/target}} : <a>topmost event target</a></li>                    |
			 |                  | <li>{{UIEvent}}.{{UIEvent/view}} : <a><code>Window</code></a></li>                   |
			 |                  | <li>{{UIEvent}}.{{UIEvent/detail}} : indicates the                                   |
			 |                  |     <a href="#current-click-count">current click count</a>; the attribute value MUST |
			 |                  |     be <code>1</code> when the user begins this action and increments by             |
			 |                  |     <code>1</code> for each click.</li>                                              |
			 |                  | <li>{{MouseEvent}}.{{MouseEvent/screenX}} : value based on the pointer position on   |
			 |                  |     the screen</li>                                                                  |
			 |                  | <li>{{MouseEvent}}.{{MouseEvent/screenY}} : value based on the pointer position on   |
			 |                  |     the screen</li>                                                                  |
			 |                  | <li>{{MouseEvent}}.{{MouseEvent/clientX}} : value based on the pointer position      |
			 |                  |     within the viewport</li>                                                         |
			 |                  | <li>{{MouseEvent}}.{{MouseEvent/clientY}} : value based on the pointer position      |
			 |                  |     within the viewport</li>                                                         |
			 |                  | <li>{{MouseEvent}}.{{MouseEvent/layerX}} : value based on the pointer position       |
			 |                  |     within the containing element</li>                                               |
			 |                  | <li>{{MouseEvent}}.{{MouseEvent/layerY}} : value based on the pointer position       |
			 |                  |     within the containing element</li>                                               |
			 |                  | <li>{{MouseEvent}}.{{MouseEvent/altKey}} : <code>true</code> if KEYCAP{Alt}          |
			 |                  |     modifier was active, otherwise <code>false</code></li>                           |
			 |                  | <li>{{MouseEvent}}.{{MouseEvent/ctrlKey}} : <code>true</code> if KEYCAP{Control}     |
			 |                  |     modifier was active, otherwise <code>false</code></li>                           |
			 |                  | <li>{{MouseEvent}}.{{MouseEvent/shiftKey}} : <code>true</code> if KEYCAP{Shift}      |
			 |                  |     modifier was active, otherwise <code>false</code></li>                           |
			 |                  | <li>{{MouseEvent}}.{{MouseEvent/metaKey}} : <code>true</code> if KEYCAP{Meta}        |
			 |                  |     modifier was active, otherwise <code>false</code></li>                           |
			 |                  | <li>{{MouseEvent}}.{{MouseEvent/button}} : value based on current button pressed</li>|
			 |                  | <li>{{MouseEvent}}.{{MouseEvent/buttons}} : value based on all buttons currently     |
			 |                  |     depressed, <code>0</code> if no buttons pressed</li>                             |
			 |                  | <li>{{MouseEvent}}.{{MouseEvent/relatedTarget}} : <code>null</code></li>             |
			 |                  | <li>For {{PointerEvent}} specific attributes, see the [[!PointerEvents3]] spec.</li> |
			 |                  | </ul>                                                                                |
			++------------------+--------------------------------------------------------------------------------------+

			The EVENT{click} event type MUST be dispatched on the <a>topmost
			event target</a> indicated by the pointer, when the user presses
			down and releases the primary pointer button, or otherwise activates
			the pointer in a manner that simulates such an action. The actuation
			method of the mouse button depends upon the pointer device and the
			environment configuration, e.g., it MAY depend on the screen
			location or the delay between the press and release of the pointing
			device button.

			The EVENT{click} event should only be fired for the primary pointer
			button (i.e., when {{MouseEvent/button}} value is <code>0</code>,
			{{MouseEvent/buttons}} value is <code>1</code>). Secondary buttons
			(like the middle or right button on a standard mouse) MUST NOT fire
			EVENT{click} events. See EVENT{auxclick} for a corresponding event that
			is associated with the non-primary buttons.

			The EVENT{click} event MAY be preceded by the EVENT{mousedown} and
			EVENT{mouseup} events on the same element, disregarding changes
			between other node types (e.g., text nodes).  Depending upon the
			environment configuration, the EVENT{click} event MAY be dispatched
			if one or more of the event types EVENT{mouseover},
			EVENT{mousemove}, and EVENT{mouseout} occur between the press and
			release of the pointing device button.  The EVENT{click} event MAY
			also be followed by the EVENT{dblclick} event.

			<p class="example">
			If a user mouses down on a text node child of a
			<code>&lt;p&gt;</code> element which has been styled with a large
			line-height, shifts the mouse slightly such that it is no longer
			over an area containing text but is still within the containing
			block of that <code>&lt;p&gt;</code> element (i.e., the pointer is
			between lines of the same text block, but not over the text node per
			se), then subsequently mouses up, this will likely still trigger a
			EVENT{click} event (if it falls within the normal temporal
			<a>hysteresis</a> for a EVENT{click}), since the user has stayed
			within the scope of the same element. Note that user-agent-generated
			mouse events are not dispatched on text nodes.
			</p>

			In addition to being associated with pointer devices, the
			EVENT{click} event type MUST be dispatched as part of an element
			activation, as described in [[#event-flow-activation]].

			<p class="note">
			For maximum accessibility, content authors are encouraged to use the
			EVENT{click} event type when defining activation behavior for custom
			controls, rather than other pointing-device event types such as
			EVENT{mousedown} or EVENT{mouseup}, which are more device-specific.
			Though the EVENT{click} event type has its origins in pointer
			devices (e.g., a mouse), subsequent implementation enhancements have
			extended it beyond that association, and it can be considered a
			device-independent event type for element activation.
			</p>

			The <a>default action</a> of the EVENT{click} event type varies
			based on the <a>event target</a> of the event and the value of the
			{{MouseEvent/button}} or {{MouseEvent/buttons}} attributes. Typical
			<a>default actions</a> of the EVENT{click} event type are as follows:

			*	If the <a>event target</a> has associated activation behavior,
				the <a>default action</a> MUST be to execute that activation
				behavior (see [[#event-flow-activation]]).

			*	If the <a>event target</a> is focusable, the <a>default
				action</a> MUST be to give that element document focus.

		<h5 id="event-type-contextmenu"><dfn>contextmenu</dfn></h5>

			++------------------+--------------------------------------------------------------------------------------+ event-definition
			=| %                |                                                                                      |
			 +------------------+--------------------------------------------------------------------------------------+
			+| Type             | <strong><code>contextmenu</code></strong>                                            |
			+| Interface        | {{PointerEvent}}                                                                     |
			+| Sync / Async     | Sync                                                                                 |
			+| Bubbles          | Yes                                                                                  |
			+| Trusted Targets  | <code>Element</code>                                                                 |
			+| Cancelable       | Yes                                                                                  |
			+| Composed         | Yes                                                                                  |
			+| Default action   | Invoke a context menu if supported.                                                  |
			+| Context<br>      | <ul>                                                                                 |
			 | (trusted events) | <li>{{Event}}.{{Event/target}} : <a>topmost event target</a></li>                    |
			 |                  | <li>{{UIEvent}}.{{UIEvent/view}} : <a><code>Window</code></a></li>                   |
			 |                  | <li>{{UIEvent}}.{{UIEvent/detail}} : 0</li>                                          |
			 |                  | <li>{{MouseEvent}}.{{MouseEvent/screenX}} : value based on the pointer position on   |
			 |                  |     the screen</li>                                                                  |
			 |                  | <li>{{MouseEvent}}.{{MouseEvent/screenY}} : value based on the pointer position on   |
			 |                  |     the screen</li>                                                                  |
			 |                  | <li>{{MouseEvent}}.{{MouseEvent/clientX}} : value based on the pointer position      |
			 |                  |     within the viewport</li>                                                         |
			 |                  | <li>{{MouseEvent}}.{{MouseEvent/clientY}} : value based on the pointer position      |
			 |                  |     within the viewport</li>                                                         |
			 |                  | <li>{{MouseEvent}}.{{MouseEvent/layerX}} : value based on the pointer position       |
			 |                  |     within the containing element</li>                                               |
			 |                  | <li>{{MouseEvent}}.{{MouseEvent/layerY}} : value based on the pointer position       |
			 |                  |     within the containing element</li>                                               |
			 |                  | <li>{{MouseEvent}}.{{MouseEvent/altKey}} : <code>true</code> if KEYCAP{Alt}          |
			 |                  |     modifier was active, otherwise <code>false</code></li>                           |
			 |                  | <li>{{MouseEvent}}.{{MouseEvent/ctrlKey}} : <code>true</code> if KEYCAP{Control}     |
			 |                  |     modifier was active, otherwise <code>false</code></li>                           |
			 |                  | <li>{{MouseEvent}}.{{MouseEvent/shiftKey}} : <code>true</code> if KEYCAP{Shift}      |
			 |                  |     modifier was active, otherwise <code>false</code></li>                           |
			 |                  | <li>{{MouseEvent}}.{{MouseEvent/metaKey}} : <code>true</code> if KEYCAP{Meta}        |
			 |                  |     modifier was active, otherwise <code>false</code></li>                           |
			 |                  | <li>{{MouseEvent}}.{{MouseEvent/button}} : value based on current button pressed</li>|
			 |                  | <li>{{MouseEvent}}.{{MouseEvent/buttons}} : value based on all buttons currently     |
			 |                  |     depressed, <code>0</code> if no buttons pressed</li>                             |
			 |                  | <li>{{MouseEvent}}.{{MouseEvent/relatedTarget}} : <code>null</code></li>             |
			 |                  | </ul>                                                                                |
			++------------------+--------------------------------------------------------------------------------------+

			A <a>user agent</a> MUST dispatch this event before invoking a context menu.

			When the EVENT{contextmenu} event is triggered by right mouse button, the
			EVENT{contextmenu} event MUST be dispatched after the EVENT{mousedown} event.

			<p class="note">
			Depending on the platform, the EVENT{contextmenu} event may be dispatched
			before or after the EVENT{mouseup} event.
			</p>

		<h5 id="event-type-dblclick"><dfn>dblclick</dfn></h5>

			++------------------+--------------------------------------------------------------------------------------+ event-definition
			=| %                |                                                                                      |
			 +------------------+--------------------------------------------------------------------------------------+
			+| Type             | <strong><code>dblclick</code></strong>                                               |
			+| Interface        | {{MouseEvent}}                                                                       |
			+| Sync / Async     | Sync                                                                                 |
			+| Bubbles          | Yes                                                                                  |
			+| Trusted Targets  | <code>Element</code>                                                                 |
			+| Cancelable       | Yes                                                                                  |
			+| Composed         | Yes                                                                                  |
			+| Default action   | None                                                                                 |
			+| Context<br>      | <ul>                                                                                 |
			 | (trusted events) | <li>{{Event}}.{{Event/target}} : <a>topmost event target</a></li>                    |
			 |                  | <li>{{UIEvent}}.{{UIEvent/view}} : <a><code>Window</code></a></li>                   |
			 |                  | <li>{{UIEvent}}.{{UIEvent/detail}} : indicates the                                   |
			 |                  |     <a href="#current-click-count">current click count</a></li>                      |
			 |                  | <li>{{MouseEvent}}.{{MouseEvent/screenX}} : value based on the pointer position on   |
			 |                  |     the screen</li>                                                                  |
			 |                  | <li>{{MouseEvent}}.{{MouseEvent/screenY}} : value based on the pointer position on   |
			 |                  |     the screen</li>                                                                  |
			 |                  | <li>{{MouseEvent}}.{{MouseEvent/clientX}} : value based on the pointer position      |
			 |                  |     within the viewport</li>                                                         |
			 |                  | <li>{{MouseEvent}}.{{MouseEvent/clientY}} : value based on the pointer position      |
			 |                  |     within the viewport</li>                                                         |
			 |                  | <li>{{MouseEvent}}.{{MouseEvent/layerX}} : value based on the pointer position       |
			 |                  |     within the containing element</li>                                               |
			 |                  | <li>{{MouseEvent}}.{{MouseEvent/layerY}} : value based on the pointer position       |
			 |                  |     within the containing element</li>                                               |
			 |                  | <li>{{MouseEvent}}.{{MouseEvent/altKey}} : <code>true</code> if KEYCAP{Alt}          |
			 |                  |     modifier was active, otherwise <code>false</code></li>                           |
			 |                  | <li>{{MouseEvent}}.{{MouseEvent/ctrlKey}} : <code>true</code> if KEYCAP{Control}     |
			 |                  |     modifier was active, otherwise <code>false</code></li>                           |
			 |                  | <li>{{MouseEvent}}.{{MouseEvent/shiftKey}} : <code>true</code> if KEYCAP{Shift}      |
			 |                  |     modifier was active, otherwise <code>false</code></li>                           |
			 |                  | <li>{{MouseEvent}}.{{MouseEvent/metaKey}} : <code>true</code> if KEYCAP{Meta}        |
			 |                  |     modifier was active, otherwise <code>false</code></li>                           |
			 |                  | <li>{{MouseEvent}}.{{MouseEvent/button}} : value based on current button pressed</li>|
			 |                  | <li>{{MouseEvent}}.{{MouseEvent/buttons}} : value based on all buttons currently     |
			 |                  |     depressed, <code>0</code> if no buttons pressed</li>                             |
			 |                  | <li>{{MouseEvent}}.{{MouseEvent/relatedTarget}} : <code>null</code></li>             |
			 |                  | </ul>                                                                                |
			++------------------+--------------------------------------------------------------------------------------+

			A <a>user agent</a> MUST dispatch this event when the primary button
			of a pointing device is clicked twice over an element. The
			definition of a double click depends on the environment
			configuration, except that the event target MUST be the same between
			EVENT{mousedown}, EVENT{mouseup}, and EVENT{dblclick}. This event
			type MUST be dispatched after the event type EVENT{click} if a click
			and double click occur simultaneously, and after the event type
			EVENT{mouseup} otherwise.

			As with the EVENT{click} event, the EVENT{dblclick} event should
			only be fired for the primary pointer button. Secondary buttons MUST
			NOT fire EVENT{dblclick} events.

			<p class="note">
			Canceling the EVENT{click} event does not affect the firing of a
			EVENT{dblclick} event.
			</p>

			As with the EVENT{click} event type, the <a>default action</a> of
			the EVENT{dblclick} event type varies based on the <a>event
			target</a> of the event and the value of the {{MouseEvent/button}}
			or {{MouseEvent/buttons}} attributes. The typical
			<a>default actions</a> of the EVENT{dblclick} event type match those
			of the EVENT{click} event type.

		<h5 id="event-type-mousedown"><dfn>mousedown</dfn></h5>

			++------------------+--------------------------------------------------------------------------------------+ event-definition
			=| %                |                                                                                      |
			 +------------------+--------------------------------------------------------------------------------------+
			+| Type             | <strong><code>mousedown</code></strong>                                              |
			+| Interface        | {{MouseEvent}}                                                                       |
			+| Sync / Async     | Sync                                                                                 |
			+| Bubbles          | Yes                                                                                  |
			+| Trusted Targets  | <code>Element</code>                                                                 |
			+| Cancelable       | Yes                                                                                  |
			+| Composed         | Yes                                                                                  |
			+| Default action   | Varies: Start a drag/drop operation; start a text selection; start a scroll/pan      |
			 |                  | interaction (in combination with the middle mouse button, if supported)              |
			+| Context<br>      | <ul>                                                                                 |
			 | (trusted events) | <li>{{Event}}.{{Event/target}} : <a>topmost event target</a></li>                    |
			 |                  | <li>{{UIEvent}}.{{UIEvent/view}} : <a><code>Window</code></a></li>                   |
			 |                  | <li>{{UIEvent}}.{{UIEvent/detail}} : indicates the                                   |
			 |                  |     <a href="#current-click-count">current click count</a> incremented by one. For   |
			 |                  |     example, if no click happened before the EVENT{mousedown}, {{UIEvent/detail}}    |
			 |                  |     will contain the value <code>1</code></li>                                       |
			 |                  | <li>{{MouseEvent}}.{{MouseEvent/screenX}} : value based on the pointer position on   |
			 |                  |     the screen</li>                                                                  |
			 |                  | <li>{{MouseEvent}}.{{MouseEvent/screenY}} : value based on the pointer position on   |
			 |                  |     the screen</li>                                                                  |
			 |                  | <li>{{MouseEvent}}.{{MouseEvent/clientX}} : value based on the pointer position      |
			 |                  |     within the viewport</li>                                                         |
			 |                  | <li>{{MouseEvent}}.{{MouseEvent/clientY}} : value based on the pointer position      |
			 |                  |     within the viewport</li>                                                         |
			 |                  | <li>{{MouseEvent}}.{{MouseEvent/layerX}} : value based on the pointer position       |
			 |                  |     within the containing element</li>                                               |
			 |                  | <li>{{MouseEvent}}.{{MouseEvent/layerY}} : value based on the pointer position       |
			 |                  |     within the containing element</li>                                               |
			 |                  | <li>{{MouseEvent}}.{{MouseEvent/altKey}} : <code>true</code> if KEYCAP{Alt}          |
			 |                  |     modifier was active, otherwise <code>false</code></li>                           |
			 |                  | <li>{{MouseEvent}}.{{MouseEvent/ctrlKey}} : <code>true</code> if KEYCAP{Control}     |
			 |                  |     modifier was active, otherwise <code>false</code></li>                           |
			 |                  | <li>{{MouseEvent}}.{{MouseEvent/shiftKey}} : <code>true</code> if KEYCAP{Shift}      |
			 |                  |     modifier was active, otherwise <code>false</code></li>                           |
			 |                  | <li>{{MouseEvent}}.{{MouseEvent/metaKey}} : <code>true</code> if KEYCAP{Meta}        |
			 |                  |     modifier was active, otherwise <code>false</code></li>                           |
			 |                  | <li>{{MouseEvent}}.{{MouseEvent/button}} : value based on current button pressed</li>|
			 |                  | <li>{{MouseEvent}}.{{MouseEvent/buttons}} : value based on all buttons currently     |
			 |                  |     depressed, <code>0</code> if no buttons pressed</li>                             |
			 |                  | <li>{{MouseEvent}}.{{MouseEvent/relatedTarget}} : <code>null</code></li>             |
			 |                  | </ul>                                                                                |
			++------------------+--------------------------------------------------------------------------------------+

			A <a>user agent</a> MUST dispatch this event when a pointing device
			button is pressed over an element.

			<p class="note">
			Many implementations use the EVENT{mousedown} event to begin a
			variety of contextually dependent <a>default actions</a>. These
			default actions can be prevented if this event is canceled. Some of
			these default actions could include: beginning a drag/drop
			interaction with an image or link, starting text selection, etc.
			Additionally, some implementations provide a mouse-driven panning
			feature that is activated when the middle mouse button is pressed at
			the time the EVENT{mousedown} event is dispatched.
			</p>

		<h5 id="event-type-mouseenter"><dfn>mouseenter</dfn></h5>

			++------------------+--------------------------------------------------------------------------------------+ event-definition
			=| %                |                                                                                      |
			 +------------------+--------------------------------------------------------------------------------------+
			+| Type             | <strong><code>mouseenter</code></strong>                                             |
			+| Interface        | {{MouseEvent}}                                                                       |
			+| Sync / Async     | Sync                                                                                 |
			+| Bubbles          | No                                                                                   |
			+| Trusted Targets  | <code>Element</code>                                                                 |
			+| Cancelable       | No                                                                                   |
			+| Composed         | No                                                                                   |
			+| Default action   | None                                                                                 |
			+| Context<br>      | <ul>                                                                                 |
			 | (trusted events) | <li>{{Event}}.{{Event/target}} : <a>topmost event target</a></li>                    |
			 |                  | <li>{{UIEvent}}.{{UIEvent/view}} : <a><code>Window</code></a></li>                   |
			 |                  | <li>{{UIEvent}}.{{UIEvent/detail}} : <code>0</code></li>                             |
			 |                  | <li>{{MouseEvent}}.{{MouseEvent/screenX}} : value based on the pointer position on   |
			 |                  |     the screen</li>                                                                  |
			 |                  | <li>{{MouseEvent}}.{{MouseEvent/screenY}} : value based on the pointer position on   |
			 |                  |     the screen</li>                                                                  |
			 |                  | <li>{{MouseEvent}}.{{MouseEvent/clientX}} : value based on the pointer position      |
			 |                  |     within the viewport</li>                                                         |
			 |                  | <li>{{MouseEvent}}.{{MouseEvent/clientY}} : value based on the pointer position      |
			 |                  |     within the viewport</li>                                                         |
			 |                  | <li>{{MouseEvent}}.{{MouseEvent/layerX}} : value based on the pointer position       |
			 |                  |     within the containing element</li>                                               |
			 |                  | <li>{{MouseEvent}}.{{MouseEvent/layerY}} : value based on the pointer position       |
			 |                  |     within the containing element</li>                                               |
			 |                  | <li>{{MouseEvent}}.{{MouseEvent/altKey}} : <code>true</code> if KEYCAP{Alt}          |
			 |                  |     modifier was active, otherwise <code>false</code></li>                           |
			 |                  | <li>{{MouseEvent}}.{{MouseEvent/ctrlKey}} : <code>true</code> if KEYCAP{Control}     |
			 |                  |     modifier was active, otherwise <code>false</code></li>                           |
			 |                  | <li>{{MouseEvent}}.{{MouseEvent/shiftKey}} : <code>true</code> if KEYCAP{Shift}      |
			 |                  |     modifier was active, otherwise <code>false</code></li>                           |
			 |                  | <li>{{MouseEvent}}.{{MouseEvent/metaKey}} : <code>true</code> if KEYCAP{Meta}        |
			 |                  |     modifier was active, otherwise <code>false</code></li>                           |
			 |                  | <li>{{MouseEvent}}.{{MouseEvent/button}} : <code>0</code></li>                       |
			 |                  | <li>{{MouseEvent}}.{{MouseEvent/buttons}} : value based on all buttons currently     |
			 |                  |     depressed, <code>0</code> if no buttons pressed</li>                             |
			 |                  | <li>{{MouseEvent}}.{{MouseEvent/relatedTarget}} : indicates the <a>event target</a>  |
			 |                  |     a pointing device is exiting, if any.</li>                                       |
			 |                  | </ul>                                                                                |
			++------------------+--------------------------------------------------------------------------------------+

			A <a>user agent</a> MUST dispatch this event when a pointing device
			is moved onto the boundaries of an element or one of its descendent
			elements.  A <a>user agent</a> MUST also dispatch this event when the
			element or one of its descendants moves to be underneath the primary
			pointing device. This event type is similar to EVENT{mouseover}, but
			differs in that it does not bubble, and MUST NOT be dispatched when
			the pointer device moves from an element onto the boundaries of one
			of its descendent elements.

			<p class="note">
			There are similarities between this event type and the CSS
			<a href="http://www.w3.org/TR/CSS2/selector.html#dynamic-pseudo-classes"
			title="Selectors"><code>:hover</code> pseudo-class</a> [[CSS2]].
			See also the EVENT{mouseleave} event type.
			</p>

		<h5 id="event-type-mouseleave"><dfn>mouseleave</dfn></h5>

			++------------------+--------------------------------------------------------------------------------------+ event-definition
			=| %                |                                                                                      |
			 +------------------+--------------------------------------------------------------------------------------+
			+| Type             | <strong><code>mouseleave</code></strong>                                             |
			+| Interface        | {{MouseEvent}}                                                                       |
			+| Sync / Async     | Sync                                                                                 |
			+| Bubbles          | No                                                                                   |
			+| Trusted Targets  | <code>Element</code>                                                                 |
			+| Cancelable       | No                                                                                   |
			+| Composed         | No                                                                                   |
			+| Default action   | None                                                                                 |
			+| Context<br>      | <ul>                                                                                 |
			 | (trusted events) | <li>{{Event}}.{{Event/target}} : <a>topmost event target</a></li>                    |
			 |                  | <li>{{UIEvent}}.{{UIEvent/view}} : <a><code>Window</code></a></li>                   |
			 |                  | <li>{{UIEvent}}.{{UIEvent/detail}} : <code>0</code></li>                             |
			 |                  | <li>{{MouseEvent}}.{{MouseEvent/screenX}} : value based on the pointer position on   |
			 |                  |     the screen</li>                                                                  |
			 |                  | <li>{{MouseEvent}}.{{MouseEvent/screenY}} : value based on the pointer position on   |
			 |                  |     the screen</li>                                                                  |
			 |                  | <li>{{MouseEvent}}.{{MouseEvent/clientX}} : value based on the pointer position      |
			 |                  |     within the viewport</li>                                                         |
			 |                  | <li>{{MouseEvent}}.{{MouseEvent/clientY}} : value based on the pointer position      |
			 |                  |     within the viewport</li>                                                         |
			 |                  | <li>{{MouseEvent}}.{{MouseEvent/layerX}} : value based on the pointer position       |
			 |                  |     within the containing element</li>                                               |
			 |                  | <li>{{MouseEvent}}.{{MouseEvent/layerY}} : value based on the pointer position       |
			 |                  |     within the containing element</li>                                               |
			 |                  | <li>{{MouseEvent}}.{{MouseEvent/altKey}} : <code>true</code> if KEYCAP{Alt}          |
			 |                  |     modifier was active, otherwise <code>false</code></li>                           |
			 |                  | <li>{{MouseEvent}}.{{MouseEvent/ctrlKey}} : <code>true</code> if KEYCAP{Control}     |
			 |                  |     modifier was active, otherwise <code>false</code></li>                           |
			 |                  | <li>{{MouseEvent}}.{{MouseEvent/shiftKey}} : <code>true</code> if KEYCAP{Shift}      |
			 |                  |     modifier was active, otherwise <code>false</code></li>                           |
			 |                  | <li>{{MouseEvent}}.{{MouseEvent/metaKey}} : <code>true</code> if KEYCAP{Meta}        |
			 |                  |     modifier was active, otherwise <code>false</code></li>                           |
			 |                  | <li>{{MouseEvent}}.{{MouseEvent/button}} : <code>0</code></li>                       |
			 |                  | <li>{{MouseEvent}}.{{MouseEvent/buttons}} : value based on all buttons currently     |
			 |                  |     depressed, <code>0</code> if no buttons pressed</li>                             |
			 |                  | <li>{{MouseEvent}}.{{MouseEvent/relatedTarget}} : indicates the <a>event target</a>  |
			 |                  |     a pointing device is exiting, if any.</li>                                       |
			 |                  | </ul>                                                                                |
			++------------------+--------------------------------------------------------------------------------------+

			A <a>user agent</a> MUST dispatch this event when a pointing device
			is moved off of the boundaries of an element and all of its
			descendent elements.  A <a>user agent</a> MUST also dispatch this event
			when the element or one of its descendants moves to be no longer underneath
			the primary pointing device. This event type is similar to EVENT{mouseout},
			but differs in that does not bubble, and that it MUST NOT be
			dispatched until the pointing device has left the boundaries of the
			element and the boundaries of all of its children.

			<p class="note">
			There are similarities between this event type and the CSS
			<a href="http://www.w3.org/TR/CSS2/selector.html#dynamic-pseudo-classes"
			title="Selectors"><code>:hover</code> pseudo-class</a> [[CSS2]].
			See also the EVENT{mouseenter} event type.
			</p>

		<h5 id="event-type-mousemove"><dfn>mousemove</dfn></h5>

			++------------------+--------------------------------------------------------------------------------------+ event-definition
			=| %                |                                                                                      |
			 +------------------+--------------------------------------------------------------------------------------+
			+| Type             | <strong><code>mousemove</code></strong>                                              |
			+| Interface        | {{MouseEvent}}                                                                       |
			+| Sync / Async     | Sync                                                                                 |
			+| Bubbles          | Yes                                                                                  |
			+| Trusted Targets  | <code>Element</code>                                                                 |
			+| Cancelable       | Yes                                                                                  |
			+| Composed         | Yes                                                                                  |
			+| Default action   | None                                                                                 |
			+| Context<br>      | <ul>                                                                                 |
			 | (trusted events) | <li>{{Event}}.{{Event/target}} : <a>topmost event target</a></li>                    |
			 |                  | <li>{{UIEvent}}.{{UIEvent/view}} : <a><code>Window</code></a></li>                   |
			 |                  | <li>{{UIEvent}}.{{UIEvent/detail}} : <code>0</code></li>                             |
			 |                  | <li>{{MouseEvent}}.{{MouseEvent/screenX}} : value based on the pointer position on   |
			 |                  |     the screen</li>                                                                  |
			 |                  | <li>{{MouseEvent}}.{{MouseEvent/screenY}} : value based on the pointer position on   |
			 |                  |     the screen</li>                                                                  |
			 |                  | <li>{{MouseEvent}}.{{MouseEvent/clientX}} : value based on the pointer position      |
			 |                  |     within the viewport</li>                                                         |
			 |                  | <li>{{MouseEvent}}.{{MouseEvent/clientY}} : value based on the pointer position      |
			 |                  |     within the viewport</li>                                                         |
			 |                  | <li>{{MouseEvent}}.{{MouseEvent/layerX}} : value based on the pointer position       |
			 |                  |     within the containing element</li>                                               |
			 |                  | <li>{{MouseEvent}}.{{MouseEvent/layerY}} : value based on the pointer position       |
			 |                  |     within the containing element</li>                                               |
			 |                  | <li>{{MouseEvent}}.{{MouseEvent/altKey}} : <code>true</code> if KEYCAP{Alt}          |
			 |                  |     modifier was active, otherwise <code>false</code></li>                           |
			 |                  | <li>{{MouseEvent}}.{{MouseEvent/ctrlKey}} : <code>true</code> if KEYCAP{Control}     |
			 |                  |     modifier was active, otherwise <code>false</code></li>                           |
			 |                  | <li>{{MouseEvent}}.{{MouseEvent/shiftKey}} : <code>true</code> if KEYCAP{Shift}      |
			 |                  |     modifier was active, otherwise <code>false</code></li>                           |
			 |                  | <li>{{MouseEvent}}.{{MouseEvent/metaKey}} : <code>true</code> if KEYCAP{Meta}        |
			 |                  |     modifier was active, otherwise <code>false</code></li>                           |
			 |                  | <li>{{MouseEvent}}.{{MouseEvent/button}} : <code>0</code></li>                       |
			 |                  | <li>{{MouseEvent}}.{{MouseEvent/buttons}} : value based on all buttons currently     |
			 |                  |     depressed, <code>0</code> if no buttons pressed</li>                             |
			 |                  | <li>{{MouseEvent}}.{{MouseEvent/relatedTarget}} : <code>null</code></li>             |
			 |                  | </ul>                                                                                |
			++------------------+--------------------------------------------------------------------------------------+

			A <a>user agent</a> MUST dispatch this event when a pointing device
			is moved while it is over an element.  The frequency rate of events
			while the pointing device is moved is implementation-, device-, and
			platform-specific, but multiple consecutive EVENT{mousemove} events
			SHOULD be fired for sustained pointer-device movement, rather than a
			single event for each instance of mouse movement.  Implementations
			are encouraged to determine the optimal frequency rate to balance
			responsiveness with performance.

			<p class="note">
			In some implementation environments, such as a browser,
			EVENT{mousemove} events can continue to fire if the user began a
			drag operation (e.g., a mouse button is pressed) and the pointing
			device has left the boundary of the user agent.
			</p>

			<p class="note" id="mousemove-now-cancelable">
			This event was formerly specified to be non-cancelable in DOM Level
			2 Events, but was changed to reflect existing interoperability between
			user agents.
			</p>

		<h5 id="event-type-mouseout"><dfn>mouseout</dfn></h5>

			++------------------+--------------------------------------------------------------------------------------+ event-definition
			=| %                |                                                                                      |
			 +------------------+--------------------------------------------------------------------------------------+
			+| Type             | <strong><code>mouseout</code></strong>                                               |
			+| Interface        | {{MouseEvent}}                                                                       |
			+| Sync / Async     | Sync                                                                                 |
			+| Bubbles          | Yes                                                                                  |
			+| Trusted Targets  | <code>Element</code>                                                                 |
			+| Cancelable       | Yes                                                                                  |
			+| Composed         | Yes                                                                                  |
			+| Default action   | None                                                                                 |
			+| Context<br>      | <ul>                                                                                 |
			 | (trusted events) | <li>{{Event}}.{{Event/target}} : <a>topmost event target</a></li>                    |
			 |                  | <li>{{UIEvent}}.{{UIEvent/view}} : <a><code>Window</code></a></li>                   |
			 |                  | <li>{{UIEvent}}.{{UIEvent/detail}} : <code>0</code></li>                             |
			 |                  | <li>{{MouseEvent}}.{{MouseEvent/screenX}} : value based on the pointer position on   |
			 |                  |     the screen</li>                                                                  |
			 |                  | <li>{{MouseEvent}}.{{MouseEvent/screenY}} : value based on the pointer position on   |
			 |                  |     the screen</li>                                                                  |
			 |                  | <li>{{MouseEvent}}.{{MouseEvent/clientX}} : value based on the pointer position      |
			 |                  |     within the viewport</li>                                                         |
			 |                  | <li>{{MouseEvent}}.{{MouseEvent/clientY}} : value based on the pointer position      |
			 |                  |     within the viewport</li>                                                         |
			 |                  | <li>{{MouseEvent}}.{{MouseEvent/layerX}} : value based on the pointer position       |
			 |                  |     within the containing element</li>                                               |
			 |                  | <li>{{MouseEvent}}.{{MouseEvent/layerY}} : value based on the pointer position       |
			 |                  |     within the containing element</li>                                               |
			 |                  | <li>{{MouseEvent}}.{{MouseEvent/altKey}} : <code>true</code> if KEYCAP{Alt}          |
			 |                  |     modifier was active, otherwise <code>false</code></li>                           |
			 |                  | <li>{{MouseEvent}}.{{MouseEvent/ctrlKey}} : <code>true</code> if KEYCAP{Control}     |
			 |                  |     modifier was active, otherwise <code>false</code></li>                           |
			 |                  | <li>{{MouseEvent}}.{{MouseEvent/shiftKey}} : <code>true</code> if KEYCAP{Shift}      |
			 |                  |     modifier was active, otherwise <code>false</code></li>                           |
			 |                  | <li>{{MouseEvent}}.{{MouseEvent/metaKey}} : <code>true</code> if KEYCAP{Meta}        |
			 |                  |     modifier was active, otherwise <code>false</code></li>                           |
			 |                  | <li>{{MouseEvent}}.{{MouseEvent/button}} : <code>0</code></li>                       |
			 |                  | <li>{{MouseEvent}}.{{MouseEvent/buttons}} : value based on all buttons currently     |
			 |                  |     depressed, <code>0</code> if no buttons pressed</li>                             |
			 |                  | <li>{{MouseEvent}}.{{MouseEvent/relatedTarget}} : indicates the <a>event target</a>  |
			 |                  |     a pointing device is entering, if any.</li>                                      |
			 |                  | </ul>                                                                                |
			++------------------+--------------------------------------------------------------------------------------+

			A <a>user agent</a> MUST dispatch this event when a pointing device
			is moved off of the boundaries of an element or when the element is
			moved to be no longer underneath the primary pointing device.
			This event type is similar to EVENT{mouseleave}, but differs in that
			does bubble, and that it MUST be dispatched when the pointer device
			moves from an element onto the boundaries of one of its descendent elements.

			<p class="note">
			See also the EVENT{mouseover} event type.
			</p>

		<h5 id="event-type-mouseover"><dfn>mouseover</dfn></h5>

			++------------------+--------------------------------------------------------------------------------------+ event-definition
			=| %                |                                                                                      |
			 +------------------+--------------------------------------------------------------------------------------+
			+| Type             | <strong><code>mouseover</code></strong>                                              |
			+| Interface        | {{MouseEvent}}                                                                       |
			+| Sync / Async     | Sync                                                                                 |
			+| Bubbles          | Yes                                                                                  |
			+| Trusted Targets  | <code>Element</code>                                                                 |
			+| Cancelable       | Yes                                                                                  |
			+| Composed         | Yes                                                                                  |
			+| Default action   | None                                                                                 |
			+| Context<br>      | <ul>                                                                                 |
			 | (trusted events) | <li>{{Event}}.{{Event/target}} : <a>topmost event target</a></li>                    |
			 |                  | <li>{{UIEvent}}.{{UIEvent/view}} : <a><code>Window</code></a></li>                   |
			 |                  | <li>{{UIEvent}}.{{UIEvent/detail}} : <code>0</code></li>                             |
			 |                  | <li>{{MouseEvent}}.{{MouseEvent/screenX}} : value based on the pointer position on   |
			 |                  |     the screen</li>                                                                  |
			 |                  | <li>{{MouseEvent}}.{{MouseEvent/screenY}} : value based on the pointer position on   |
			 |                  |     the screen</li>                                                                  |
			 |                  | <li>{{MouseEvent}}.{{MouseEvent/clientX}} : value based on the pointer position      |
			 |                  |     within the viewport</li>                                                         |
			 |                  | <li>{{MouseEvent}}.{{MouseEvent/clientY}} : value based on the pointer position      |
			 |                  |     within the viewport</li>                                                         |
			 |                  | <li>{{MouseEvent}}.{{MouseEvent/layerX}} : value based on the pointer position       |
			 |                  |     within the containing element</li>                                               |
			 |                  | <li>{{MouseEvent}}.{{MouseEvent/layerY}} : value based on the pointer position       |
			 |                  |     within the containing element</li>                                               |
			 |                  | <li>{{MouseEvent}}.{{MouseEvent/altKey}} : <code>true</code> if KEYCAP{Alt}          |
			 |                  |     modifier was active, otherwise <code>false</code></li>                           |
			 |                  | <li>{{MouseEvent}}.{{MouseEvent/ctrlKey}} : <code>true</code> if KEYCAP{Control}     |
			 |                  |     modifier was active, otherwise <code>false</code></li>                           |
			 |                  | <li>{{MouseEvent}}.{{MouseEvent/shiftKey}} : <code>true</code> if KEYCAP{Shift}      |
			 |                  |     modifier was active, otherwise <code>false</code></li>                           |
			 |                  | <li>{{MouseEvent}}.{{MouseEvent/metaKey}} : <code>true</code> if KEYCAP{Meta}        |
			 |                  |     modifier was active, otherwise <code>false</code></li>                           |
			 |                  | <li>{{MouseEvent}}.{{MouseEvent/button}} : <code>0</code></li>                       |
			 |                  | <li>{{MouseEvent}}.{{MouseEvent/buttons}} : value based on all buttons currently     |
			 |                  |     depressed, <code>0</code> if no buttons pressed</li>                             |
			 |                  | <li>{{MouseEvent}}.{{MouseEvent/relatedTarget}} : indicates the <a>event target</a>  |
			 |                  |     a pointing device is entering, if any.</li>                                      |
			 |                  | </ul>                                                                                |
			++------------------+--------------------------------------------------------------------------------------+

			A <a>user agent</a> MUST dispatch this event when a pointing device
			is moved onto the boundaries of an element or when the element is
			moved to be underneath the primary pointing device.
			This event type is similar to EVENT{mouseenter}, but differs in
			that it bubbles, and that it MUST be dispatched when the pointer device moves onto the
			boundaries of an element whose ancestor element is the <a>event
			target</a> for the same <a>event listener</a> instance.

			<p class="note">
			See also the EVENT{mouseout} event type.
			</p>

		<h5 id="event-type-mouseup"><dfn>mouseup</dfn></h5>

			++------------------+--------------------------------------------------------------------------------------+ event-definition
			=| %                |                                                                                      |
			 +------------------+--------------------------------------------------------------------------------------+
			+| Type             | <strong><code>mouseup</code></strong>                                                |
			+| Interface        | {{MouseEvent}}                                                                       |
			+| Sync / Async     | Sync                                                                                 |
			+| Bubbles          | Yes                                                                                  |
			+| Trusted Targets  | <code>Element</code>                                                                 |
			+| Cancelable       | Yes                                                                                  |
			+| Composed         | Yes                                                                                  |
			+| Default action   | None                                                                                 |
			+| Context<br>      | <ul>                                                                                 |
			 | (trusted events) | <li>{{Event}}.{{Event/target}} : <a>topmost event target</a></li>                    |
			 |                  | <li>{{UIEvent}}.{{UIEvent/view}} : <a><code>Window</code></a></li>                   |
			 |                  | <li>{{UIEvent}}.{{UIEvent/detail}} : indicates the                                   |
			 |                  |     <a href="#current-click-count">current click count</a> incremented by one.</li>  |
			 |                  | <li>{{MouseEvent}}.{{MouseEvent/screenX}} : value based on the pointer position on   |
			 |                  |     the screen</li>                                                                  |
			 |                  | <li>{{MouseEvent}}.{{MouseEvent/screenY}} : value based on the pointer position on   |
			 |                  |     the screen</li>                                                                  |
			 |                  | <li>{{MouseEvent}}.{{MouseEvent/clientX}} : value based on the pointer position      |
			 |                  |     within the viewport</li>                                                         |
			 |                  | <li>{{MouseEvent}}.{{MouseEvent/clientY}} : value based on the pointer position      |
			 |                  |     within the viewport</li>                                                         |
			 |                  | <li>{{MouseEvent}}.{{MouseEvent/layerX}} : value based on the pointer position       |
			 |                  |     within the containing element</li>                                               |
			 |                  | <li>{{MouseEvent}}.{{MouseEvent/layerY}} : value based on the pointer position       |
			 |                  |     within the containing element</li>                                               |
			 |                  | <li>{{MouseEvent}}.{{MouseEvent/altKey}} : <code>true</code> if KEYCAP{Alt}          |
			 |                  |     modifier was active, otherwise <code>false</code></li>                           |
			 |                  | <li>{{MouseEvent}}.{{MouseEvent/ctrlKey}} : <code>true</code> if KEYCAP{Control}     |
			 |                  |     modifier was active, otherwise <code>false</code></li>                           |
			 |                  | <li>{{MouseEvent}}.{{MouseEvent/shiftKey}} : <code>true</code> if KEYCAP{Shift}      |
			 |                  |     modifier was active, otherwise <code>false</code></li>                           |
			 |                  | <li>{{MouseEvent}}.{{MouseEvent/metaKey}} : <code>true</code> if KEYCAP{Meta}        |
			 |                  |     modifier was active, otherwise <code>false</code></li>                           |
			 |                  | <li>{{MouseEvent}}.{{MouseEvent/button}} : value based on current button pressed</li>|
			 |                  | <li>{{MouseEvent}}.{{MouseEvent/buttons}} : value based on all buttons currently     |
			 |                  |     depressed, <code>0</code> if no buttons pressed</li>                             |
			 |                  | <li>{{MouseEvent}}.{{MouseEvent/relatedTarget}} : <code>null</code></li>             |
			 |                  | </ul>                                                                                |
			++------------------+--------------------------------------------------------------------------------------+

			A <a>user agent</a> MUST dispatch this event when a pointing device
			button is released over an element.

			<p class="note">
			In some implementation environments, such as a browser, a
			EVENT{mouseup} event can be dispatched even if the pointing device
			has left the boundary of the user agent, e.g., if the user began a
			drag operation with a mouse button pressed.
			</p>

