<section>
<h2 id="legacy-event-types">Legacy Event Types</h2>


<em>This section is normative. The following event types are obsolete and should
only be implemented by <a>user agents</a> that require compatibility with legacy
software.</em>

The purpose of this section is to document the current state of these features
and their relation to normative events. For implementations which do support
these events, it is suggested that the definitions provided in this section be
used.

The following table provides an informative summary of the event types which are
deprecated in this specification. They are included here for reference and
completeness.

++-----------------------------+--------+----------+------------------------------------------+------------------+------------+-----------+------------------------------------------------+
=|	  Event Type			   | Sync / | Bubbling | Trusted event							  |	 DOM Interface	 | Cancelable | Composed  | Default Action								   |
 |							   | Async	|  Phase   | target types							  |					 |			  |			  |						 						   |
 +-----------------------------+----o---+----o-----+--------------------o---------------------+--------o---------+------o-----+------o----+------------------------------------------------+
+| DOMActivate				   | Sync	| Yes	   | <code>Element</code>					  | UIEvent			 | Yes		  | Yes		  | None										   |
+| DOMFocusIn				   | Sync	| Yes	   | <a><code>Window</code></a>,			  | FocusEvent		 | No		  | Yes		  | None										   |
 |							   |		|		   | <code>Element</code></td>				  |					 |			  |			  |												   |
+| DOMFocusOut				   | Sync	| Yes	   | <a><code>Window</code></a>,			  | FocusEvent		 | No		  | Yes		  | None										   |
 |							   |		|		   | <code>Element</code></td>				  |					 |			  |			  |												   |
+| keypress					   | Sync	| Yes	   | <code>Element</code>					  | KeyboardEvent	 | Yes		  | Yes		  | Varies: launch <a>text composition system</a>; |
 |							   |		|		   |										  |					 |			  |			  | EVENT{blur} and EVENT{focus} events;		   |
 |							   |		|		   |										  |					 |			  |			  | EVENT{DOMActivate} event; other event		   |
+| textInput		   | Sync	| Yes	   | <code>Element</code>					  | TextEvent	 | Yes		  | Yes		  | See definition |
++-----------------------------+--------+----------+------------------------------------------+------------------+------------+------------+------------------------------------------------+


<h3 id="legacy-uievent-events">Legacy {{UIEvent}} events</h3>

	<h4 id="legacy-uievent-event-types">Legacy {{UIEvent}} event types</h4>

		<h5 id="event-type-DOMActivate"><dfn>DOMActivate</dfn></h5>

			<table class="event-definition">
				<tr>
					<th>Type</th>
					<td><strong><code>DOMActivate</code></strong></td>
				</tr>
				<tr>
					<th>Interface</th>
					<td>{{UIEvent}}</td>
				</tr>
				<tr>
					<th>Sync / Async</th>
					<td>Sync</td>
				</tr>
				<tr>
					<th>Bubbles</th>
					<td>Yes</td>
				</tr>
				<tr>
					<th>Trusted Targets</th>
					<td><code>Element</code></td>
				</tr>
				<tr>
					<th>Cancelable</th>
					<td>Yes</td>
				</tr>
				<tr>
					<th>Composed</th>
					<td>Yes</td>
				</tr>
				<tr>
					<th>Default action</th>
					<td>None</td>
				</tr>
				<tr>
					<th>Context<br>(trusted events)</th>
					<td>
						<ul>
							<li>{{Event}}.{{Event/target}} :
								element being activated</li>
							<li>{{UIEvent}}.{{UIEvent/view}} :
								<a><code>Window</code></a></li>
							<li>{{UIEvent}}.{{UIEvent/detail}} :
								<code>0</code></li>
						</ul>
					</td>
				</tr>
			</table>

			A <a>user agent</a> MUST dispatch this event when a button, link, or
			other state-changing element is activated.

			<p class="warning" id="DOMActivate-deprecated">
			The EVENT{DOMActivate} <a>event type</a> is defined in this
			specification for reference and completeness, but this specification
			<a>deprecates</a> the use of this event type in favor of the related
			<a>event type</a> EVENT{click}.  Other specifications MAY define and
			maintain their own EVENT{DOMActivate} <a>event type</a> for backwards
			compatibility.
			</p>

			<p class="note" id="DOMActivate-click">
			While EVENT{DOMActivate} and EVENT{click} are not completely equivalent,
			implemented behavior for the EVENT{click} <a>event type</a> has
			developed to encompass the most critical accessibility aspects for which
			the EVENT{DOMActivate} <a>event type</a> was designed, and is more
			widely implemented.  Content authors are encouraged to use the
			EVENT{click} <a>event type</a> rather than the related EVENT{mousedown}
			or EVENT{mouseup} <a>event type</a> to ensure maximum accessibility.
			</p>

		Implementations which support the EVENT{DOMActivate} <a>event type</a>
		SHOULD also dispatch a EVENT{DOMActivate} event as a <a>default
		action</a> of a EVENT{click} event which is associated with an
		<a>activation trigger</a>. However, such implementations SHOULD only
		initiate the associated <a>activation behavior</a> once for any given
		occurrence of an <a>activation trigger</a>.

		<div class="example">
		<p>
		The EVENT{DOMActivate} <a>event type</a> is REQUIRED to be supported for
		XForms [[XFORMS11]], which is intended for implementation within a <a>host
		language</a>. In a scenario where a plugin or script-based
		implementation of XForms is intended for installation in a native
		implementation of this specification which does not support the
		EVENT{DOMActivate} <a>event type</a>, the XForms <a>user agent</a> has
		to synthesize and dispatch its own EVENT{DOMActivate} events based on
		the appropriate <a>activation triggers</a>.
		</p>

		<p>
		Thus, when a EVENT{click} event is dispatched by a <a>user agent</a>
		conforming to UI Events, the XForms <a>user agent</a> has to determine
		whether to synthesize a EVENT{DOMActivate} event with the same relevant
		properties as a <a>default action</a> of that EVENT{click} event.
		Appropriate cues might be whether the EVENT{click} event {{Event/isTrusted}},
		or whether its <a>event target</a>
		has a EVENT{DOMActivate} [=event listener=] registered.
		</p>
		</div>

		<p class="note">
		Don't rely upon the interoperable support of EVENT{DOMActivate} in many
		<a>user agents</a>. Instead, the EVENT{click} <a>event type</a> should
		be used since it will provide more accessible behavior due to broader
		implementation support.
		</p>

		<p class="warning">
		The EVENT{DOMActivate} <a>event type</a> is deprecated in this
		specification.
		</p>

	<h4 id="legacy-uievent-event-order">Activation event order</h4>

		If the <code>DOMActivate</code> event is supported by the <a>user
		agent</a>, then the events MUST be dispatched in a set order relative to
		each other: (with only pertinent events listed):

				++---+-------------+---------------------------------------------------+
				=| # | Event Type  | Notes                                             |
				 +---+-------------+---------------------------------------------------+
				+| 1 | click       |                                                   |
				+| 2 | DOMActivate | <a>default action</a>, if supported by the        |
				 |   |             | <a>user agent</a>; synthesized;                   |
				 |   |             | <code>isTrusted="true"</code>                     |
				+| 3 |             | <em>All other <a>default actions</a>,             |
				 |   |             | including the <a>activation behavior</a></em>     |
				++---+-------------+---------------------------------------------------+

		If the focused element is activated by a key event, then the following
		shows the typical sequence of events (with only pertinent events listed):

				++---+-------------+---------------------------------------------------+
				=| # | Event Type  | Notes                                             |
				 +---+-------------+---------------------------------------------------+
				+| 1 | keydown     | MUST be a key which can activate the element,     |
				 |   |             | such as the KEYCAP{Enter} or KEYCAP{&nbsp;&nbsp;} |
				 |   |             | (spacebar) key, or the element is not activated   |
				+| 2 | click       | <a>default action</a>; synthesized;               |
				 |   |             | <code>isTrusted="true"</code>                     |
				+| 3 | DOMActivate | <a>default action</a>, if supported by the        |
				 |   |             | <a>user agent</a>; synthesized;                   |
				 |   |             | <code>isTrusted="true"</code>                     |
				+| 4 |             | <em>All other <a>default actions</a>,             |
				 |   |             | including the <a>activation behavior</a></em>     |
				++---+-------------+---------------------------------------------------+

<h3 id="legacy-focusevent-events">Legacy {{FocusEvent}} events</h3>

	<h4 id="legacy-focusevent-event-types">Legacy {{FocusEvent}} event types</h4>

		<h5 id="event-type-DOMFocusIn"><dfn>DOMFocusIn</dfn></h5>

			<table class="event-definition">
				<tr>
					<th>Type</th>
					<td><strong><code>DOMFocusIn</code></strong></td>
				</tr>
				<tr>
					<th>Interface</th>
					<td>{{FocusEvent}}</td>
				</tr>
				<tr>
					<th>Sync / Async</th>
					<td>Sync</td>
				</tr>
				<tr>
					<th>Bubbles</th>
					<td>Yes</td>
				</tr>
				<tr>
					<th>Trusted Targets</th>
					<td><a><code>Window</code></a>, <code>Element</code></td>
				</tr>
				<tr>
					<th>Cancelable</th>
					<td>No</td>
				</tr>
				<tr>
					<th>Composed</th>
					<td>Yes</td>
				</tr>
				<tr>
					<th>Default action</th>
					<td>None</td>
				</tr>
				<tr>
					<th>Context<br>(trusted events)</th>
					<td>
						<ul>
							<li>{{Event}}.{{Event/target}} :
								<a>event target</a> receiving focus</li>
							<li>{{UIEvent}}.{{UIEvent/view}} :
								<a><code>Window</code></a></li>
							<li>{{UIEvent}}.{{UIEvent/detail}} :
								<code>0</code></li>
							<li>{{FocusEvent}}.{{FocusEvent/relatedTarget}} :
								<code>null</code></li>
						</ul>
					</td>
				</tr>
			</table>

			A <a>user agent</a> MUST dispatch this event when an <a>event
			target</a> receives focus. The focus MUST be given to the
			element before the dispatch of this event type. This event type
			MUST be dispatched after the event type EVENT{focus}.

			<p class="warning">
			The EVENT{DOMFocusIn} event type is defined in this
			specification for reference and completeness, but this
			specification <a>deprecates</a> the use of this event type in
			favor of the related event types EVENT{focus} and EVENT{focusin}.
			</p>

		<h5 id="event-type-DOMFocusOut"><dfn>DOMFocusOut</dfn></h5>

			<table class="event-definition">
				<tr>
					<th>Type</th>
					<td><strong><code>DOMFocusOut</code></strong></td>
				</tr>
				<tr>
					<th>Interface</th>
					<td>{{FocusEvent}}</td>
				</tr>
				<tr>
					<th>Sync / Async</th>
					<td>Sync</td>
				</tr>
				<tr>
					<th>Bubbles</th>
					<td>Yes</td>
				</tr>
				<tr>
					<th>Trusted Targets</th>
					<td><a><code>Window</code></a>, <code>Element</code></td>
				</tr>
				<tr>
					<th>Cancelable</th>
					<td>No</td>
				</tr>
				<tr>
					<th>Composed</th>
					<td>Yes</td>
				</tr>
				<tr>
					<th>Default action</th>
					<td>None</td>
				</tr>
				<tr>
					<th>Context<br>(trusted events)</th>
					<td>
						<ul>
							<li>{{Event}}.{{Event/target}} :
								<a>event target</a> losing focus</li>
							<li>{{UIEvent}}.{{UIEvent/view}} :
								<a><code>Window</code></a></li>
							<li>{{UIEvent}}.{{UIEvent/detail}} :
								<code>0</code></li>
							<li>{{FocusEvent}}.{{FocusEvent/relatedTarget}} :
								<code>null</code></li>
						</ul>
					</td>
				</tr>
			</table>

			A <a>user agent</a> MUST dispatch this event when an <a>event
			target</a> loses focus. The focus MUST be taken from the element
			before the dispatch of this event type. This event type MUST be
			dispatched after the event type EVENT{blur}.

			<p class="warning">
			The EVENT{DOMFocusOut} event type is defined in this
			specification for reference and completeness, but this
			specification <a>deprecates</a> the use of this event type in
			favor of the related event types EVENT{blur} and EVENT{focusout}.
			</p>

	<h4 id="legacy-focusevent-event-order">Legacy FocusEvent event order</h4>

		The following is the typical sequence of events when a focus is shifted
		between elements, including the deprecated EVENT{DOMFocusIn} and
		EVENT{DOMFocusOut} events. The order shown assumes that no element is
		initially focused.

				++---+-------------+---------------------------------------------------+
				=| # | Event Type  | Notes                                             |
				 +---+-------------+---------------------------------------------------+
				+|   |             | <em>User shifts focus</em>                        |
				+| 1 | focusin     | Sent before first target element receives focus   |
				+| 2 | focus       | Sent after first target element receives focus    |
				+| 3 | DOMFocusIn  | If supported                                      |
				+|   |             | <em>User shifts focus</em>                        |
				+| 4 | focusout    | Sent before first target element loses focus      |
				+| 5 | focusin     | Sent before second target element receives focus  |
				+| 6 | blur        | Sent after first target element loses focus       |
				+| 7 | DOMFocusOut | If supported                                      |
				+| 8 | focus       | Sent after second target element receives focus   |
				+| 9 | DOMFocusIn  | If supported                                      |
				++---+-------------+---------------------------------------------------+

<h3 id="legacy-keyboardevent-events">Legacy {{KeyboardEvent}} events</h3>

	The EVENT{keypress} event is the traditional method for capturing key events
	and processing them before the DOM is updated with the effects of the key
	press. Code that makes use of the EVENT{keypress} event typically relies on
	the legacy {{KeyboardEvent/charCode}}, {{KeyboardEvent/keyCode}}, and
	{{UIEvent/which}} attributes.

	Note that the EVENT{keypress} event is specific to key events, and has been
	replaced by the more general event sequence of EVENT{beforeinput} and
	EVENT{input} events. These new <code>input</code> events are not specific to
	keyboard actions and can be used to capture user input regardless of the
	original source.

	<h4 id="legacy-keyboardevent-event-types">Legacy {{KeyboardEvent}} event types</h4>

		<h5 id="event-type-keypress"><dfn>keypress</dfn></h5>

			<table class="event-definition">
				<tr>
					<th>Type</th>
					<td><strong><code>keypress</code></strong></td>
				</tr>
				<tr>
					<th>Interface</th>
					<td>{{KeyboardEvent}}</td>
				</tr>
				<tr>
					<th>Sync / Async</th>
					<td>Sync</td>
				</tr>
				<tr>
					<th>Bubbles</th>
					<td>Yes</td>
				</tr>
				<tr>
					<th>Trusted Targets</th>
					<td><code>Element</code></td>
				</tr>
				<tr>
					<th>Cancelable</th>
					<td>Yes</td>
				</tr>
				<tr>
					<th>Composed</th>
					<td>Yes</td>
				</tr>
				<tr>
					<th>Default action</th>
					<td>Varies:
						launch <a>text composition system</a>;
						EVENT{blur} and EVENT{focus} events;
						EVENT{DOMActivate} event;
						other event</td>
				</tr>
				<tr>
					<th>Context<br>(trusted events)</th>
					<td>
						<ul>
							<li>{{Event}}.{{Event/target}} :
									focused element processing the key event or if no element focused, then the
									<a>body element</a> if available, otherwise the
									<a>root element</a></li>
							<li>{{UIEvent}}.{{UIEvent/view}} :
								<a><code>Window</code></a></li>
							<li>{{UIEvent}}.{{UIEvent/detail}} :
								<code>0</code></li>
							<li>{{KeyboardEvent}}.{{UIEvent/which}} :
								legacy numerical code for this key</li>
							<li>{{KeyboardEvent}}.{{KeyboardEvent/charCode}} :
								legacy character value for this event</li>
							<li>{{KeyboardEvent}}.{{KeyboardEvent/keyCode}} :
								legacy numerical code for this key</li>
							<li>{{KeyboardEvent}}.{{KeyboardEvent/key}} :
								the key value of the key pressed.</li>
							<li>{{KeyboardEvent}}.{{KeyboardEvent/code}} :
								the code value associated with the key's physical placement on the keyboard.</li>
							<li>{{KeyboardEvent}}.{{KeyboardEvent/location}} :
								the location of the key on the device.</li>
							<li>{{KeyboardEvent}}.{{KeyboardEvent/altKey}} :
								<code>true</code> if KEYCAP{Alt} modifier was active, otherwise <code>false</code></li>
							<li>{{KeyboardEvent}}.{{KeyboardEvent/shiftKey}} :
								<code>true</code> if KEYCAP{Shift} modifier was active, otherwise <code>false</code></li>
							<li>{{KeyboardEvent}}.{{KeyboardEvent/ctrlKey}} :
								<code>true</code> if KEYCAP{Control} modifier was active, otherwise <code>false</code></li>
							<li>{{KeyboardEvent}}.{{KeyboardEvent/metaKey}} :
								<code>true</code> if KEYCAP{Meta} modifier was active, otherwise <code>false</code></li>
							<li>{{KeyboardEvent}}.{{KeyboardEvent/repeat}} :
								<code>false</code></li>
							<li>{{KeyboardEvent}}.{{KeyboardEvent/isComposing}} :
								<code>true</code> if the key event occurs as part of a composition session, otherwise <code>false</code></li>
						</ul>
					</td>
				</tr>
			</table>

			If supported by a <a>user agent</a>, this event MUST be dispatched
			when a key is pressed down, if and only if that key normally
			produces a <a>character value</a>. The EVENT{keypress} event type is
			device dependent and relies on the capabilities of the input devices
			and how they are mapped in the operating system.

			This event type MUST be generated after the <a>key mapping</a>. It
			MUST NOT be fired when using an <a>input method editor</a>.

			If this event is canceled, it should prevent the EVENT{input} event
			from firing, in addition to canceling the <a>default action</a>.

			Authors SHOULD use the EVENT{beforeinput} event instead of the
			EVENT{keypress} event.

			<p class="note">
			The EVENT{keypress} event is traditionally associated with detecting
			a <a>character value</a> rather than a physical key, and might not
			be available on all keys in some configurations.
			</p>

			<p class="warning">
			The EVENT{keypress} event type is defined in this specification for
			reference and completeness, but this specification <a>deprecates</a>
			the use of this event type. When in editing contexts, authors can
			subscribe to the EVENT{beforeinput} event instead.
			</p>

	<h4 id="keypress-event-order">EVENT{keypress} event order</h4>

		The EVENT{keypress} event type MUST be dispatched after the
		EVENT{keydown} event and before the EVENT{keyup} event associated with
		the same key.

		The EVENT{keypress} event type MUST be dispatched after the
		EVENT{beforeinput} event and before the EVENT{input} event associated
		with the same key.

		The sequence of key events for user-agents the support the
		EVENT{keypress} event is demonstrated in the following example:

		<div class="example">
		++---+-------------+------------------------+---------------------+--------------------------------+
		=| # | Event Type  | {{KeyboardEvent}}<br>  | {{InputEvent}}<br>  | Notes                          |
		 |   |             | {{KeyboardEvent/key}}  | {{InputEvent/data}} |                                |
		 +---+-------------+-----------o------------+----------o----------+--------------------------------+
		+| 1 | keydown     | KEY_NOLINK{a}          |                     |                                |
		+| 2 | beforeinput |                        | GLYPH{a}            |                                |
		+| 3 | keypress    | KEY_NOLINK{a}          |                     |                                |
		+|   |             |                        |                     | <em>Any <a>default actions</a> |
		 |   |             |                        |                     | related to this key, such as   |
		 |   |             |                        |                     | inserting a character in to    |
		 |   |             |                        |                     | the DOM.</em>                  |
		+| 4 | input       |                        |                     |                                |
		+| 5 | keyup       | KEY_NOLINK{a}          |                     |                                |
		++---+-------------+------------------------+---------------------+--------------------------------+
		</div>

<h3 id="legacy-textevent-events">Legacy {{TextEvent}} events</h3>

<pre class="idl">
[Exposed=Window]
interface TextEvent : UIEvent {
    readonly attribute DOMString data;
    undefined initTextEvent(DOMString type,
        optional boolean bubbles = false,
        optional boolean cancelable = false,
        optional Window? view = null,
        optional DOMString data = "undefined");
};
</pre>

Issue: See <a href="event-algo.html#textevent">Text Event section in UI Events Algorithms</a> for the {{TextEvent}} interface and the <dfn export>textInput</dfn> event.

</section>
